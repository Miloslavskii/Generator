<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StockSharp.Messages</name>
    </assembly>
    <members>
        <member name="T:StockSharp.Messages.BaseConnectionMessage">
            <summary>
            Base connect/disconnect message.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.BaseConnectionMessage.#ctor(StockSharp.Messages.MessageTypes)">
            <summary>
            Initialize <see cref="T:StockSharp.Messages.BaseConnectionMessage"/>.
            </summary>
            <param name="type">Message type.</param>
        </member>
        <member name="P:StockSharp.Messages.BaseConnectionMessage.Error">
            <summary>
            Information about the error connection or disconnection.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.BaseConnectionMessage.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:StockSharp.Messages.BoardMessage">
            <summary>
            The message contains information about the electronic board.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.BoardMessage.ExchangeCode">
            <summary>
            Exchange code, which owns the board. Maybe be the same <see cref="P:StockSharp.Messages.BoardMessage.Code"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.BoardMessage.Code">
            <summary>
            Board code.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.BoardMessage.ExpiryTime">
            <summary>
            Securities expiration times.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.BoardMessage.WorkingTime">
            <summary>
            Board working hours.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.BoardMessage.TimeZone">
            <summary>
            Information about the time zone where the exchange is located.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.BoardMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.BoardMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.BoardMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.BoardMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.BoardMessage.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:StockSharp.Messages.CandleStates">
            <summary>
            Candle states.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CandleStates.None">
            <summary>
            Empty state (candle doesn't exist).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CandleStates.Active">
            <summary>
            Candle active.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CandleStates.Finished">
            <summary>
            Candle finished.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.CandleMessage">
            <summary>
            The message contains information about the candle.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.SecurityId">
            <summary>
            Security ID.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.OpenTime">
            <summary>
            Open time.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.HighTime">
            <summary>
            Time of candle high.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.LowTime">
            <summary>
            Time of candle low.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.CloseTime">
            <summary>
            Close time.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.OpenPrice">
            <summary>
            Opening price.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.HighPrice">
            <summary>
            Highest price.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.LowPrice">
            <summary>
            Lowest price.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.ClosePrice">
            <summary>
            Closing price.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.OpenVolume">
            <summary>
            Volume at open.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.CloseVolume">
            <summary>
            Volume at close.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.HighVolume">
            <summary>
            Volume at high.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.LowVolume">
            <summary>
            Volume at low.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.RelativeVolume">
            <summary>
            Relative volume.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.TotalPrice">
            <summary>
            Total price size.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.TotalVolume">
            <summary>
            Total volume.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.OpenInterest">
            <summary>
            Open interest.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.TotalTicks">
            <summary>
            Number of ticks.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.UpTicks">
            <summary>
            Number of uptrending ticks.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.DownTicks">
            <summary>
            Number of downtrending ticks.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.State">
            <summary>
            State.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.OriginalTransactionId">
            <summary>
            ID of the original message <see cref="P:StockSharp.Messages.MarketDataMessage.TransactionId"/> for which this message is a response.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.IsFinished">
            <summary>
            It is the last message in the requested batch of candles.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.PriceLevels">
            <summary>
            Price levels.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandleMessage.Arg">
            <summary>
            Candle arg.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.CandleMessage.#ctor(StockSharp.Messages.MessageTypes)">
            <summary>
            Initialize <see cref="T:StockSharp.Messages.CandleMessage"/>.
            </summary>
            <param name="type">Message type.</param>
        </member>
        <member name="M:StockSharp.Messages.CandleMessage.CopyTo(StockSharp.Messages.CandleMessage)">
            <summary>
            Copy parameters.
            </summary>
            <param name="copy">Copy.</param>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.CandleMessage.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:StockSharp.Messages.TimeFrameCandleMessage">
            <summary>
            The message contains information about the time-frame candle.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.TimeFrameCandleMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.TimeFrameCandleMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.TimeFrameCandleMessage.TimeFrame">
            <summary>
            Time-frame.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.TimeFrameCandleMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.TimeFrameCandleMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="P:StockSharp.Messages.TimeFrameCandleMessage.Arg">
            <summary>
            Candle arg.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.TickCandleMessage">
            <summary>
            The message contains information about the tick candle.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.TickCandleMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.TickCandleMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.TickCandleMessage.MaxTradeCount">
            <summary>
            Maximum tick count.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.TickCandleMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.TickCandleMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="P:StockSharp.Messages.TickCandleMessage.Arg">
            <summary>
            Candle arg.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.VolumeCandleMessage">
            <summary>
            The message contains information about the volume candle.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.VolumeCandleMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.VolumeCandleMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.VolumeCandleMessage.Volume">
            <summary>
            Maximum volume.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.VolumeCandleMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.VolumeCandleMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="P:StockSharp.Messages.VolumeCandleMessage.Arg">
            <summary>
            Candle arg.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.RangeCandleMessage">
            <summary>
            The message contains information about the range candle.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.RangeCandleMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.RangeCandleMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.RangeCandleMessage.PriceRange">
            <summary>
            Range of price.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.RangeCandleMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.RangeCandleMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="P:StockSharp.Messages.RangeCandleMessage.Arg">
            <summary>
            Candle arg.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.PnFTypes">
            <summary>
            Symbol types.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.PnFTypes.X">
            <summary>
            X (price up).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.PnFTypes.O">
            <summary>
            0 (price down).
            </summary>
        </member>
        <member name="T:StockSharp.Messages.PnFArg">
            <summary>
            Point in fugure (X0) candle arg.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.PnFArg.BoxSize">
            <summary>
            Range of price above which create a new <see cref="F:StockSharp.Messages.PnFTypes.X"/> or <see cref="F:StockSharp.Messages.PnFTypes.O"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.PnFArg.ReversalAmount">
            <summary>
            The number of boxes (an <see cref="F:StockSharp.Messages.PnFTypes.X"/> or an <see cref="F:StockSharp.Messages.PnFTypes.O"/>) required to cause a reversal.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.PnFArg.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:StockSharp.Messages.PnFArg.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.PnFArg"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.PnFArg.OnEquals(StockSharp.Messages.PnFArg)">
            <summary>
            Compare <see cref="T:StockSharp.Messages.PnFArg"/> on the equivalence.
            </summary>
            <param name="other">Another value with which to compare.</param>
            <returns><see langword="true" />, if the specified object is equal to the current object, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Messages.PnFArg.GetHashCode">
            <summary>
            Get the hash code of the object <see cref="T:StockSharp.Messages.PnFArg"/>.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="T:StockSharp.Messages.PnFCandleMessage">
            <summary>
            The message contains information about the XO candle.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.PnFCandleMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.PnFCandleMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.PnFCandleMessage.PnFArg">
            <summary>
            Value of arguments.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.PnFCandleMessage.PnFType">
            <summary>
            Type of symbols.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.PnFCandleMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.PnFCandleMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="P:StockSharp.Messages.PnFCandleMessage.Arg">
            <summary>
            Candle arg.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.RenkoCandleMessage">
            <summary>
            The message contains information about the renko candle.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.RenkoCandleMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.RenkoCandleMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.RenkoCandleMessage.BoxSize">
            <summary>
            Possible price change range.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.RenkoCandleMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.RenkoCandleMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="P:StockSharp.Messages.RenkoCandleMessage.Arg">
            <summary>
            Candle arg.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.CandlePriceLevel">
            <summary>
            The price level.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandlePriceLevel.Price">
            <summary>
            Price.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandlePriceLevel.TotalVolume">
            <summary>
            The volume of bids and asks.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandlePriceLevel.BuyVolume">
            <summary>
            The volume of bids.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandlePriceLevel.SellVolume">
            <summary>
            The volume of asks.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandlePriceLevel.BuyCount">
            <summary>
            The number of bids.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandlePriceLevel.SellCount">
            <summary>
            The number of asks.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandlePriceLevel.BuyVolumes">
            <summary>
            The volumes collection of bids.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.CandlePriceLevel.SellVolumes">
            <summary>
            The volumes collection of asks.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.CandlePriceLevel.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.CandlePriceLevel"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Messages.ChangePasswordMessage">
            <summary>
            Change password message.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.ChangePasswordMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.ChangePasswordMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ChangePasswordMessage.TransactionId">
            <summary>
            Request identifier.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ChangePasswordMessage.OriginalTransactionId">
            <summary>
            ID of the original message <see cref="P:StockSharp.Messages.ChangePasswordMessage.TransactionId"/> for which this message is a response.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ChangePasswordMessage.NewPassword">
            <summary>
            New password.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ChangePasswordMessage.Error">
            <summary>
            Change password error info.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.ChangePasswordMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.ChangePasswordMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Messages.ChannelMessageAdapter">
            <summary>
            Message adapter, forward messages through a transport channel <see cref="T:StockSharp.Messages.IMessageChannel"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.ChannelMessageAdapter.#ctor(StockSharp.Messages.IMessageAdapter,StockSharp.Messages.IMessageChannel,StockSharp.Messages.IMessageChannel)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.ChannelMessageAdapter"/>.
            </summary>
            <param name="innerAdapter">Underlying adapter.</param>
            <param name="inputChannel">Incomming messages channgel.</param>
            <param name="outputChannel">Outgoing message channel.</param>
        </member>
        <member name="P:StockSharp.Messages.ChannelMessageAdapter.InputChannel">
            <summary>
            Adapter.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ChannelMessageAdapter.OutputChannel">
            <summary>
            Adapter.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ChannelMessageAdapter.OwnInputChannel">
            <summary>
            Control the lifetime of the incoming messages channel.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ChannelMessageAdapter.OwnOutputChannel">
            <summary>
            Control the lifetime of the outgoing messages channel.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.ChannelMessageAdapter.OnInnerAdapterNewOutMessage(StockSharp.Messages.Message)">
            <summary>
            Process <see cref="P:StockSharp.Messages.MessageAdapterWrapper.InnerAdapter"/> output message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:StockSharp.Messages.ChannelMessageAdapter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.ChannelMessageAdapter.SendInMessage(StockSharp.Messages.Message)">
            <summary>
            Send message.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:StockSharp.Messages.ChannelMessageAdapter.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.ChannelMessageAdapter"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Messages.ConnectionStates">
            <summary>
            Connection states.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.ConnectionStates.Disconnected">
            <summary>
            Non active.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.ConnectionStates.Disconnecting">
            <summary>
            Disconnect pending.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.ConnectionStates.Connecting">
            <summary>
            Connect pending.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.ConnectionStates.Connected">
            <summary>
            Connection active.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.ConnectionStates.Failed">
            <summary>
            Error connection.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.ConnectMessage">
            <summary>
            Connect to a server message (uses as a command in outgoing case, event in incoming case).
            </summary>
        </member>
        <member name="M:StockSharp.Messages.ConnectMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.ConnectMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.ConnectMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.ConnectMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Messages.Currency">
            <summary>
            Currency.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.Currency.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.Currency"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.Currency.Type">
            <summary>
            Currency type. The default is <see cref="F:StockSharp.Messages.CurrencyTypes.RUB"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.Currency.Value">
            <summary>
            Absolute value in <see cref="T:StockSharp.Messages.CurrencyTypes"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.Currency.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.Currency"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.Currency.OnEquals(StockSharp.Messages.Currency)">
            <summary>
            Compare <see cref="T:StockSharp.Messages.Currency"/> on the equivalence.
            </summary>
            <param name="other">Another value with which to compare.</param>
            <returns><see langword="true" />, if the specified object is equal to the current object, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Messages.Currency.GetHashCode">
            <summary>
            Get the hash code of the object <see cref="T:StockSharp.Messages.Currency"/>.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:StockSharp.Messages.Currency.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:StockSharp.Messages.Currency.op_Implicit(System.Decimal)~StockSharp.Messages.Currency">
            <summary>
            Cast <see cref="T:System.Decimal"/> object to the type <see cref="T:StockSharp.Messages.Currency"/>.
            </summary>
            <param name="value"><see cref="T:System.Decimal"/> value.</param>
            <returns>Object <see cref="T:StockSharp.Messages.Currency"/>.</returns>
        </member>
        <member name="M:StockSharp.Messages.Currency.op_Explicit(StockSharp.Messages.Currency)~System.Decimal">
            <summary>
            Cast object from <see cref="T:StockSharp.Messages.Currency"/> to <see cref="T:System.Decimal"/>.
            </summary>
            <param name="unit">Object <see cref="T:StockSharp.Messages.Currency"/>.</param>
            <returns><see cref="T:System.Decimal"/> value.</returns>
        </member>
        <member name="M:StockSharp.Messages.Currency.op_Addition(StockSharp.Messages.Currency,StockSharp.Messages.Currency)">
            <summary>
            Add the two objects <see cref="T:StockSharp.Messages.Currency"/>.
            </summary>
            <param name="c1">First object <see cref="T:StockSharp.Messages.Currency"/>.</param>
            <param name="c2">Second object <see cref="T:StockSharp.Messages.Currency"/>.</param>
            <returns>The result of addition.</returns>
            <remarks>
            The values must be the same <see cref="P:StockSharp.Messages.Currency.Type"/>.
            </remarks>
        </member>
        <member name="M:StockSharp.Messages.Currency.op_Subtraction(StockSharp.Messages.Currency,StockSharp.Messages.Currency)">
            <summary>
            Subtract one value from another value.
            </summary>
            <param name="c1">First object <see cref="T:StockSharp.Messages.Currency"/>.</param>
            <param name="c2">Second object <see cref="T:StockSharp.Messages.Currency"/>.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:StockSharp.Messages.Currency.op_Multiply(StockSharp.Messages.Currency,StockSharp.Messages.Currency)">
            <summary>
            Multiply one value to another.
            </summary>
            <param name="c1">First object <see cref="T:StockSharp.Messages.Currency"/>.</param>
            <param name="c2">Second object <see cref="T:StockSharp.Messages.Currency"/>.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:StockSharp.Messages.Currency.op_Division(StockSharp.Messages.Currency,StockSharp.Messages.Currency)">
            <summary>
            Divide one value to another.
            </summary>
            <param name="c1">First object <see cref="T:StockSharp.Messages.Currency"/>.</param>
            <param name="c2">Second object <see cref="T:StockSharp.Messages.Currency"/>.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="T:StockSharp.Messages.CurrencyHelper">
            <summary>
            Extension class for <see cref="T:StockSharp.Messages.Currency"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.CurrencyHelper.ToCurrency(System.Decimal,StockSharp.Messages.CurrencyTypes)">
            <summary>
            Cast <see cref="T:System.Decimal"/> to <see cref="T:StockSharp.Messages.Currency"/>.
            </summary>
            <param name="value">Currency value.</param>
            <param name="type">Currency type.</param>
            <returns>Currency.</returns>
        </member>
        <member name="T:StockSharp.Messages.CurrencyTypes">
            <summary>
            Currency type.
            </summary>
            <remarks>
            The codes are set in accordance with the ISO 4217 Currency Codes.
            </remarks>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.AFA">
            <summary>
            Afghanistan, Afghanis.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.TMT">
            <summary>
            Turkmenistan, Turkmenistani manat.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.UZS">
            <summary>
            Uzbekistan, Uzbekistan som.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.TJS">
            <summary>
            Tajikistan, Somoni.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.AMD">
            <summary>
            Armenia, Armenian dram.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.XDR">
            <summary>
            International Monetary Fund, Special Drawing Rights.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.AZN">
            <summary>
            Azerbaijan, Azerbaijani manat.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.BYR">
            <summary>
            Belarus, Belarusian ruble.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.BYN">
            <summary>
            Belarus, Belarusian ruble.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.RON">
            <summary>
            Romania, Romanian new leu.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.BGN">
            <summary>
            Bulgaria, Bulgarian lev.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.KGS">
            <summary>
            Kyrgyzstan, Kyrgyzstani som.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.ALL">
            <summary>
            Albania, Leke.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.DZD">
            <summary>
            Algeria, Algeria Dinars.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.ARS">
            <summary>
            Argentina, Pesos.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.AWG">
            <summary>
            Aruba, Guilders (also called Florins).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.AUD">
            <summary>
            Australia, Dollars.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.BSD">
            <summary>
            Bahamas, Dollars.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.BHD">
            <summary>
            Bahrain, Dinars.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.BDT">
            <summary>
            Bangladesh, Taka.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.BBD">
            <summary>
            Barbados, Dollars.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.BZD">
            <summary>
            Belize, Dollars.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.BMD">
            <summary>
            Bermuda, Dollars.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.BTN">
            <summary>
            Bhutan, Ngultrum.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.BOB">
            <summary>
            Bolivia, Bolivianos.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.BWP">
            <summary>
            Botswana, Pulas.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.BRL">
            <summary>
            Brazil, Brazil Real.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.GBP">
            <summary>
            United Kingdom, Pounds sterling.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.BND">
            <summary>
            Brunei Darussalam, Dollars.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.BIF">
            <summary>
            Burundi, Francs.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.XOF">
            <summary>
            Communaute Financiere Africaine BCEAO, Francs.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.XAF">
            <summary>
            Communaute Financiere Africaine BEAC, Francs.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.KHR">
            <summary>
            Cambodia, Riels.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.CAD">
            <summary>
            Canada, Dollars.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.CVE">
            <summary>
            Cape Verde, Escudos.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.KYD">
            <summary>
            Cayman Islands, Dollars.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.CLP">
            <summary>
            Chile, Pesos.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.CNY">
            <summary>
            China, Yuan Renminbi.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.CNH">
            <summary>
            China, offshore RMB.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.COP">
            <summary>
            Colombia, Pesos.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.KMF">
            <summary>
            Comoros, Francs.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.CRC">
            <summary>
            Costa Rica, Colones.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.HRK">
            <summary>
            Croatia, Kuna.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.CUP">
            <summary>
            Cuba, Pesos.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.CYP">
            <summary>
            Cyprus, Pounds.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.CZK">
            <summary>
            Czech Republic, Koruny.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.DKK">
            <summary>
            Denmark, Kroner.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.DJF">
            <summary>
            Djibouti, Francs.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.DOP">
            <summary>
            Dominican Republic, Pesos.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.XCD">
            <summary>
            East Caribbean Dollars.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.EGP">
            <summary>
            Egypt, Pounds.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.SVC">
            <summary>
            El Salvador, Colones.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.EEK">
            <summary>
            Estonia, Krooni.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.ETB">
            <summary>
            Ethiopia, Birr.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.EUR">
            <summary>
            Euro Member Countries, Euro.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.FKP">
            <summary>
            Falkland Islands (Malvinas), Pounds.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.GMD">
            <summary>
            Gambia, Dalasi.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.GHC">
            <summary>
            Ghana, Cedis.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.GIP">
            <summary>
            Gibraltar, Pounds.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.XAU">
            <summary>
            Gold, Ounces.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.GTQ">
            <summary>
            Guatemala, Quetzales.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.GNF">
            <summary>
            Guinea, Francs.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.GYD">
            <summary>
            Guyana, Dollars.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.HTG">
            <summary>
            Haiti, Gourdes.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.HNL">
            <summary>
            Honduras, Lempiras.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.HKD">
            <summary>
            Hong Kong, Dollars.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.HUF">
            <summary>
            Hungary, Forint.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.ISK">
            <summary>
            Iceland, Kronur.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.INR">
            <summary>
            India, Rupees.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.IDR">
            <summary>
            Indonesia, Rupiahs.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.IQD">
            <summary>
            Iraq, Dinars.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.ILS">
            <summary>
            Israel, New Shekels.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.JMD">
            <summary>
            Jamaica, Dollars.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.JPY">
            <summary>
            Japan, Yen.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.JOD">
            <summary>
            Jordan, Dinars.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.KZT">
            <summary>
            Kazakstan, Tenge.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.KES">
            <summary>
            Kenya, Shillings.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.KRW">
            <summary>
            Korea (South), Won.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.KWD">
            <summary>
            Kuwait, Dinars.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.LAK">
            <summary>
            Laos, Kips.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.LVL">
            <summary>
            Latvia, Lati.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.LBP">
            <summary>
            Lebanon, Pounds.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.LSL">
            <summary>
            Lesotho, Maloti.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.LRD">
            <summary>
            Liberia, Dollars.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.LYD">
            <summary>
            Libya, Dinars.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.LTL">
            <summary>
            Lithuania, Litai.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.MOP">
            <summary>
            Macau, Patacas.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.MKD">
            <summary>
            Macedonia, Denars.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.MGF">
            <summary>
            Malagasy, Franc.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.MWK">
            <summary>
            Malawi, Kwachas.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.MYR">
            <summary>
            Malaysia, Ringgits.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.MVR">
            <summary>
            Maldives (Maldive Islands), Rufiyaa.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.MTL">
            <summary>
            Malta, Liri.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.MRO">
            <summary>
            Mauritania, Ouguiyas.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.MUR">
            <summary>
            Mauritius, Rupees.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.MXN">
            <summary>
            Mexico, Pesos.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.MDL">
            <summary>
            Moldova, Lei.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.MNT">
            <summary>
            Mongolia, Tugriks.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.MAD">
            <summary>
            Morocco, Dirhams.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.MZM">
            <summary>
            Mozambique, Meticais.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.MMK">
            <summary>
            Myanmar (Burma), Kyats.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.NAD">
            <summary>
            Namibia, Dollars.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.NPR">
            <summary>
            Nepal, Nepal Rupees.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.ANG">
            <summary>
            Netherlands Antilles, Guilders (also called Florins).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.NZD">
            <summary>
            New Zealand, Dollars.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.NIO">
            <summary>
            Nicaragua, Gold Cordobas.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.NGN">
            <summary>
            Nigeria, Nairas.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.KPW">
            <summary>
            Korea (North), Won.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.NOK">
            <summary>
            Norway, Krone.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.OMR">
            <summary>
            Oman, Rials.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.XPF">
            <summary>
            Comptoirs Francais du Pacifique Francs.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.PKR">
            <summary>
            Pakistan, Rupees.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.XPD">
            <summary>
            Palladium Ounces.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.PAB">
            <summary>
            Panama, Balboa.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.PGK">
            <summary>
            Papua New Guinea, Kina.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.PYG">
            <summary>
            Paraguay, Guarani.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.PEN">
            <summary>
            Peru, Nuevos Soles.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.PHP">
            <summary>
            Philippines, Pesos.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.XPT">
            <summary>
            Platinum, Ounces.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.PLN">
            <summary>
            Poland, Zlotych.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.QAR">
            <summary>
            Qatar, Rials.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.RUB">
            <summary>
            Russia, Abkhazia, South Ossetia, Russian rouble.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.WST">
            <summary>
            Samoa, Tala.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.STD">
            <summary>
            Sao Tome and Principe, Dobras.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.SAR">
            <summary>
            Saudi Arabia, Riyals.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.SCR">
            <summary>
            Seychelles, Rupees.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.SLL">
            <summary>
            Sierra Leone, Leones.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.XAG">
            <summary>
            Silver, Ounces.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.SGD">
            <summary>
            Singapore, Dollars.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.SKK">
            <summary>
            Slovakia, Koruny.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.SIT">
            <summary>
            Slovenia, Tolars.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.SBD">
            <summary>
            Solomon Islands, Dollars.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.SOS">
            <summary>
            Somalia, Shillings.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.ZAR">
            <summary>
            South Africa, Rand.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.LKR">
            <summary>
            Sri Lanka, Rupees.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.SHP">
            <summary>
            Saint Helena, Pounds.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.SDD">
            <summary>
            Sudan, Dinars.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.SRD">
            <summary>
            Surinamese dollar.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.SZL">
            <summary>
            Swaziland, Emalangeni.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.SEK">
            <summary>
            Sweden, Kronor.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.CHF">
            <summary>
            Switzerland, Francs.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.SYP">
            <summary>
            Syria, Pounds.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.TWD">
            <summary>
            Taiwan, New Dollars.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.TZS">
            <summary>
            Tanzania, Shillings.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.THB">
            <summary>
            Thailand, Baht.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.TOP">
            <summary>
            Tonga, Pa'anga.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.TTD">
            <summary>
            Trinidad and Tobago, Dollars.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.TND">
            <summary>
            Tunisia, Dinars.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.TRL">
            <summary>
            Turkey, Liras.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.USD">
            <summary>
            United States of America, Dollars.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.AED">
            <summary>
            United Arab Emirates, Dirhams.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.UGX">
            <summary>
            Uganda, Shillings.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.UAH">
            <summary>
            Ukraine, Hryvnia.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.UYU">
            <summary>
            Uruguay, Pesos.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.VUV">
            <summary>
            Vanuatu, Vatu.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.VEB">
            <summary>
            Venezuela, Bolivares.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.VND">
            <summary>
            Viet Nam, Dong.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.YER">
            <summary>
            Yemen, Rials.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.CSD">
            <summary>
            Serbian dinar.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.ZMK">
            <summary>
            Zambia, Kwacha.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.ZWD">
            <summary>
            Zimbabwe, Zimbabwe Dollars.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.TRY">
            <summary>
            Turkey, Northern Cyprus, Turkish lira.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.XVN">
            <summary>
            Ven.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.BTC">
            <summary>
            Bitcoin.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.GBX">
            <summary>
            United Kingdom, Pence sterling.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.CurrencyTypes.GHS">
            <summary>
            Ghana, Ghanaian Cedi.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.DisconnectMessage">
            <summary>
            Disconnect from a server message (uses as a command in outgoing case, event in incoming case).
            </summary>
        </member>
        <member name="M:StockSharp.Messages.DisconnectMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.DisconnectMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.DisconnectMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.DisconnectMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Messages.ExecutionTypes">
            <summary>
            The types of data that contain information in <see cref="T:StockSharp.Messages.ExecutionMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.ExecutionTypes.Tick">
            <summary>
            Tick trade.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.ExecutionTypes.Transaction">
            <summary>
            Transaction.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.ExecutionTypes.Obsolete">
            <summary>
            Obsolete.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.ExecutionTypes.OrderLog">
            <summary>
            Order log.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.ExecutionMessage">
            <summary>
            The message contains information about the execution.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.SecurityId">
            <summary>
            Security ID.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.PortfolioName">
            <summary>
            Portfolio name.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.ClientCode">
            <summary>
            Client code assigned by the broker.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.BrokerCode">
            <summary>
            Broker firm code.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.DepoName">
            <summary>
            The depositary where the physical security.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.ServerTime">
            <summary>
            Server time.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.TransactionId">
            <summary>
            Transaction ID.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.OriginalTransactionId">
            <summary>
            ID of original transaction, for which this message is the answer.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.ExecutionType">
            <summary>
            Data type, information about which is contained in the <see cref="T:StockSharp.Messages.ExecutionMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.IsCancelled">
            <summary>
            Is the action an order cancellation.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.OrderId">
            <summary>
            Order ID.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.OrderStringId">
            <summary>
            Order ID (as string, if electronic board does not use numeric order ID representation).
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.OrderBoardId">
            <summary>
            Board order id. Uses in case of <see cref="P:StockSharp.Messages.ExecutionMessage.OrderId"/> and <see cref="P:StockSharp.Messages.ExecutionMessage.OrderStringId"/> is a brokerage system ids.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.DerivedOrderId">
            <summary>
            Derived order ID (e.g., conditional order generated a real exchange order).
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.DerivedOrderStringId">
            <summary>
            Derived order ID (e.g., conditional order generated a real exchange order).
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.HasOrderInfo">
            <summary>
            Is the message contains order info.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.HasTradeInfo">
            <summary>
            Is the message contains trade info.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.OrderPrice">
            <summary>
            Order price.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.OrderVolume">
            <summary>
            Number of contracts in the order.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.TradeVolume">
            <summary>
            Number of contracts in an trade.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.VisibleVolume">
            <summary>
            Visible quantity of contracts in order.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.Side">
            <summary>
            Order side (buy or sell).
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.Balance">
            <summary>
            Order contracts remainder.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.OrderType">
            <summary>
            Order type.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.OrderStatus">
            <summary>
            System order status.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.OrderState">
            <summary>
            Order state.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.Comment">
            <summary>
            Placed order comment.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.SystemComment">
            <summary>
            Message for order (created by the trading system when registered, changed or cancelled).
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.IsSystem">
            <summary>
            Is a system trade.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.ExpiryDate">
            <summary>
            Order expiry time. The default is <see langword="null" />, which mean (GTC).
            </summary>
            <remarks>
            If the value is equal <see langword="null" /> or <see cref="F:System.DateTimeOffset.MaxValue"/>, order will be GTC (good til cancel). Or uses exact date.
            </remarks>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.TimeInForce">
            <summary>
            Limit order execution condition.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.TradeId">
            <summary>
            Trade ID.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.TradeStringId">
            <summary>
            Trade ID (as string, if electronic board does not use numeric order ID representation).
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.TradePrice">
            <summary>
            Trade price.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.TradeStatus">
            <summary>
            System trade status.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.OriginSide">
            <summary>
            Deal initiator (seller or buyer).
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.OpenInterest">
            <summary>
            Number of open positions (open interest).
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.Error">
            <summary>
            Error registering/cancelling order.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.Condition">
            <summary>
            Order condition (e.g., stop- and algo- orders parameters).
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.IsUpTick">
            <summary>
            Is tick uptrend or downtrend in price. Uses only <see cref="P:StockSharp.Messages.ExecutionMessage.ExecutionType"/> for <see cref="F:StockSharp.Messages.ExecutionTypes.Tick"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.Commission">
            <summary>
            Commission (broker, exchange etc.). Uses when <see cref="P:StockSharp.Messages.ExecutionMessage.ExecutionType"/> set to <see cref="F:StockSharp.Messages.ExecutionTypes.Transaction"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.Latency">
            <summary>
            Network latency. Uses when <see cref="P:StockSharp.Messages.ExecutionMessage.ExecutionType"/> set to <see cref="F:StockSharp.Messages.ExecutionTypes.Transaction"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.Slippage">
            <summary>
            Slippage in trade price. Uses when <see cref="P:StockSharp.Messages.ExecutionMessage.ExecutionType"/> set to <see cref="F:StockSharp.Messages.ExecutionTypes.Transaction"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.UserOrderId">
            <summary>
            User order id. Uses when <see cref="P:StockSharp.Messages.ExecutionMessage.ExecutionType"/> set to <see cref="F:StockSharp.Messages.ExecutionTypes.Transaction"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.Currency">
            <summary>
            Trading security currency.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.PnL">
            <summary>
            The profit, realized by trade.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ExecutionMessage.Position">
            <summary>
            The position, generated by order or trade.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.ExecutionMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.ExecutionMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.ExecutionMessage.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:StockSharp.Messages.ExecutionMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.ExecutionMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Messages.Extensions">
            <summary>
            Extension class.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.Extensions.CreatePortfolioChangeMessage(StockSharp.Messages.IMessageAdapter,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.PortfolioChangeMessage"/>.
            </summary>
            <param name="adapter">Trading system adapter.</param>
            <param name="pfName">Portfolio name.</param>
            <returns>Portfolio change message.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.CreatePositionChangeMessage(StockSharp.Messages.IMessageAdapter,System.String,StockSharp.Messages.SecurityId)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.PositionChangeMessage"/>.
            </summary>
            <param name="adapter">Trading system adapter.</param>
            <param name="pfName">Portfolio name.</param>
            <param name="securityId">Security ID.</param>
            <returns>Position change message.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.GetBestBid(StockSharp.Messages.QuoteChangeMessage)">
            <summary>
            Get best bid.
            </summary>
            <param name="message">Market depth.</param>
            <returns>Best bid, or <see langword="null" />, if no bids are empty.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.GetBestAsk(StockSharp.Messages.QuoteChangeMessage)">
            <summary>
            Get best ask.
            </summary>
            <param name="message">Market depth.</param>
            <returns>Best ask, or <see langword="null" />, if no asks are empty.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.CreateReply(StockSharp.Messages.OrderMessage)">
            <summary>
            Cast <see cref="T:StockSharp.Messages.OrderMessage"/> to the <see cref="T:StockSharp.Messages.ExecutionMessage"/>.
            </summary>
            <param name="message"><see cref="T:StockSharp.Messages.OrderMessage"/>.</param>
            <returns><see cref="T:StockSharp.Messages.ExecutionMessage"/>.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.CopyExtensionInfo(StockSharp.Messages.IExtendableEntity,StockSharp.Messages.IExtendableEntity)">
            <summary>
            Copy extended info.
            </summary>
            <param name="from">The object of which is copied to extended information.</param>
            <param name="to">The object, which is copied to extended information.</param>
        </member>
        <member name="M:StockSharp.Messages.Extensions.GetServerTime(StockSharp.Messages.Message)">
            <summary>
            Get message server time.
            </summary>
            <param name="message">Message.</param>
            <returns>Server time message. If the value is <see langword="null" />, the message does not contain the server time.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.AddTransactionalSupport(StockSharp.Messages.IMessageAdapter)">
            <summary>
            Fill the <see cref="P:StockSharp.Messages.IMessageAdapter.SupportedMessages"/> message types related to transactional.
            </summary>
            <param name="adapter">Adapter.</param>
        </member>
        <member name="M:StockSharp.Messages.Extensions.RemoveTransactionalSupport(StockSharp.Messages.IMessageAdapter)">
            <summary>
            Remove from <see cref="P:StockSharp.Messages.IMessageAdapter.SupportedMessages"/> message types related to transactional.
            </summary>
            <param name="adapter">Adapter.</param>
        </member>
        <member name="M:StockSharp.Messages.Extensions.AddMarketDataSupport(StockSharp.Messages.IMessageAdapter)">
            <summary>
            Fill the <see cref="P:StockSharp.Messages.IMessageAdapter.SupportedMessages"/> message types related to market-data.
            </summary>
            <param name="adapter">Adapter.</param>
        </member>
        <member name="M:StockSharp.Messages.Extensions.RemoveMarketDataSupport(StockSharp.Messages.IMessageAdapter)">
            <summary>
            Remove from <see cref="P:StockSharp.Messages.IMessageAdapter.SupportedMessages"/> message types related to market-data.
            </summary>
            <param name="adapter">Adapter.</param>
        </member>
        <member name="M:StockSharp.Messages.Extensions.AddSupportedMessage(StockSharp.Messages.IMessageAdapter,StockSharp.Messages.MessageTypes)">
            <summary>
            Add the message type info <see cref="P:StockSharp.Messages.IMessageAdapter.SupportedMessages"/>.
            </summary>
            <param name="adapter">Adapter.</param>
            <param name="type">Message type.</param>
        </member>
        <member name="M:StockSharp.Messages.Extensions.RemoveSupportedMessage(StockSharp.Messages.IMessageAdapter,StockSharp.Messages.MessageTypes)">
            <summary>
            Remove the message type from <see cref="P:StockSharp.Messages.IMessageAdapter.SupportedMessages"/>.
            </summary>
            <param name="adapter">Adapter.</param>
            <param name="type">Message type.</param>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsMessageSupported(StockSharp.Messages.IMessageAdapter,StockSharp.Messages.MessageTypes)">
            <summary>
            Determines whether the specified message type is supported by the adapter.
            </summary>
            <param name="adapter">Adapter.</param>
            <param name="type">Message type.</param>
            <returns><see langword="true"/> if the specified message type is supported, otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.IsCandleMessage(System.Type)">
            <summary>
            Determines whether the specified message type is derived from <see cref="T:StockSharp.Messages.CandleMessage"/>.
            </summary>
            <param name="messageType">The message type.</param>
            <returns><see langword="true"/> if the specified message type is derived from <see cref="T:StockSharp.Messages.CandleMessage"/>, otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.HasOrderInfo(StockSharp.Messages.ExecutionMessage)">
            <summary>
            Determines whether the specified message contains order information.
            </summary>
            <param name="message">The message.</param>
            <returns><see langword="true"/> if the specified message contains order information, otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.HasTradeInfo(StockSharp.Messages.ExecutionMessage)">
            <summary>
            Determines whether the specified message contains trade information.
            </summary>
            <param name="message">The message.</param>
            <returns><see langword="true"/> if the specified message contains trade information, otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.ToErrorMessage(System.String)">
            <summary>
            Convert error text message to <see cref="T:StockSharp.Messages.ErrorMessage"/> instance.
            </summary>
            <param name="description">Error text message.</param>
            <returns><see cref="T:StockSharp.Messages.ErrorMessage"/> instance.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.ToErrorMessage(System.Exception)">
            <summary>
            Convert error info into <see cref="T:StockSharp.Messages.ErrorMessage"/>.
            </summary>
            <param name="error">Error info.</param>
            <returns>Error message.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.Convert(StockSharp.Messages.Currency,StockSharp.Messages.CurrencyTypes)">
            <summary>
            To convert one currency to another.
            </summary>
            <param name="currencyFrom">The currency to be converted.</param>
            <param name="currencyTypeTo">The code of the target currency.</param>
            <returns>Converted currency.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.Convert(StockSharp.Messages.CurrencyTypes,StockSharp.Messages.CurrencyTypes)">
            <summary>
            To get the conversion rate for converting one currency to another.
            </summary>
            <param name="from">The code of currency to be converted.</param>
            <param name="to">The code of the target currency.</param>
            <returns>The rate.</returns>
        </member>
        <member name="M:StockSharp.Messages.Extensions.Convert(StockSharp.Messages.CurrencyTypes,StockSharp.Messages.CurrencyTypes,System.DateTime)">
            <summary>
            To get the conversion rate for the specified date.
            </summary>
            <param name="from">The code of currency to be converted.</param>
            <param name="to">The code of the target currency.</param>
            <param name="date">The rate date.</param>
            <returns>The rate.</returns>
        </member>
        <member name="T:StockSharp.Messages.IDailyInfoSoap">
            <summary>
            The interface for access to currency service.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.IDailyInfoSoap.GetCursOnDate(System.DateTime)">
            <summary>
            To get currency exchange rates for the specific date.
            </summary>
            <param name="date">Date of rates.</param>
            <returns>Currency exchange rates.</returns>
        </member>
        <member name="T:StockSharp.Messages.MarketDataFinishedMessage">
            <summary>
            Market data request finished message.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MarketDataFinishedMessage.OriginalTransactionId">
            <summary>
            ID of the original message <see cref="P:StockSharp.Messages.MarketDataMessage.TransactionId"/> for which this message is a response.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MarketDataFinishedMessage.IsHistory">
            <summary>
            Contains history market data.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.MarketDataFinishedMessage.#ctor">
            <summary>
            Initialize <see cref="T:StockSharp.Messages.Message"/>.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.IExtendableEntity">
            <summary>
            The interface for all trading types that have the property <see cref="P:StockSharp.Messages.IExtendableEntity.ExtensionInfo"/> for keeping extended information.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IExtendableEntity.ExtensionInfo">
            <summary>
            Extended information.
            </summary>
            <remarks>
            Required when extra information is stored in the program.
            </remarks>
        </member>
        <member name="T:StockSharp.Messages.ExtandableEntityHelper">
            <summary>
            Extension class for <see cref="P:StockSharp.Messages.IExtendableEntity.ExtensionInfo"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.ExtandableEntityHelper.AddValue(StockSharp.Messages.IExtendableEntity,System.String,System.Object)">
            <summary>
            Add value into <see cref="P:StockSharp.Messages.IExtendableEntity.ExtensionInfo"/>.
            </summary>
            <param name="entity">Entity.</param>
            <param name="key">Key.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:StockSharp.Messages.ExtandableEntityHelper.GetValue``1(StockSharp.Messages.IExtendableEntity,System.String)">
            <summary>
            Get value from <see cref="P:StockSharp.Messages.IExtendableEntity.ExtensionInfo"/>.
            </summary>
            <typeparam name="T">Value type.</typeparam>
            <param name="entity">Entity.</param>
            <param name="key">Key.</param>
            <returns>Value.</returns>
        </member>
        <member name="T:StockSharp.Messages.OrderCancelVolumeRequireTypes">
            <summary>
            Types of <see cref="P:StockSharp.Messages.OrderCancelMessage.Volume"/> required to cancel orders.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderCancelVolumeRequireTypes.Balance">
            <summary>
            Non filled balance.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderCancelVolumeRequireTypes.Volume">
            <summary>
            Initial volume.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.IMessageAdapter">
            <summary>
            Base message adapter interface which convert messages <see cref="T:StockSharp.Messages.Message"/> to native commands and back.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.TransactionIdGenerator">
            <summary>
            Transaction id generator.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.SupportedMessages">
            <summary>
            Supported by adapter message types.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.IsValid">
            <summary>
            The parameters validity check.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.SecurityClassInfo">
            <summary>
            Description of the class of securities, depending on which will be marked in the <see cref="P:StockSharp.Messages.SecurityMessage.SecurityType"/> and <see cref="P:StockSharp.Messages.SecurityId.BoardCode"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.ReConnectionSettings">
            <summary>
            Connection tracking settings <see cref="T:StockSharp.Messages.IMessageAdapter"/> with a server.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.HeartbeatInterval">
            <summary>
            Lifetime ping interval.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.PortfolioLookupRequired">
            <summary>
            <see cref="T:StockSharp.Messages.PortfolioLookupMessage"/> required to get portfolios and positions.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.SecurityLookupRequired">
            <summary>
            <see cref="T:StockSharp.Messages.SecurityLookupMessage"/> required to get securities.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.OrderStatusRequired">
            <summary>
            <see cref="T:StockSharp.Messages.OrderStatusMessage"/> required to get orders and ow trades.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.StorageName">
            <summary>
            The storage name, associated with the adapter.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.IsNativeIdentifiersPersistable">
            <summary>
            Native identifier can be stored.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.IsNativeIdentifiers">
            <summary>
            Identify security in messages by native identifier <see cref="P:StockSharp.Messages.SecurityId.Native"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.OrderCancelVolumeRequired">
            <summary>
            <see cref="P:StockSharp.Messages.OrderCancelMessage.Volume"/> required to cancel orders.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.AssociatedBoardCode">
            <summary>
            Board code for combined security.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapter.SecurityExtendedFields">
            <summary>
            Names of extended security fields in <see cref="T:StockSharp.Messages.SecurityMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.IMessageAdapter.CreateOrderCondition">
            <summary>
            Create condition for order type <see cref="F:StockSharp.Messages.OrderTypes.Conditional"/>, that supports the adapter.
            </summary>
            <returns>Order condition. If the connection does not support the order type <see cref="F:StockSharp.Messages.OrderTypes.Conditional"/>, it will be returned <see langword="null" />.</returns>
        </member>
        <member name="M:StockSharp.Messages.IMessageAdapter.IsConnectionAlive">
            <summary>
            Check the connection is alive. Uses only for connected states.
            </summary>
            <returns><see langword="true" />, is the connection still alive, <see langword="false" />, if the connection was rejected.</returns>
        </member>
        <member name="M:StockSharp.Messages.IMessageAdapter.CreateOrderLogMarketDepthBuilder(StockSharp.Messages.SecurityId)">
            <summary>
            Create market depth builder.
            </summary>
            <param name="securityId">Security ID.</param>
            <returns>Order log to market depth builder.</returns>
        </member>
        <member name="T:StockSharp.Messages.IMessageAdapterProvider">
            <summary>
            The message adapter's provider interface. 
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapterProvider.Adapters">
            <summary>
            All available adapters.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.IMessageAdapterProvider.GetAdapter(System.String)">
            <summary>
            Get adapter by portfolio name.
            </summary>
            <param name="portfolioName">Portfolio name.</param>
            <returns>The found adapter.</returns>
        </member>
        <member name="M:StockSharp.Messages.IMessageAdapterProvider.SetAdapter(System.String,StockSharp.Messages.IMessageAdapter)">
            <summary>
            Make association adapter and portfolio name.
            </summary>
            <param name="portfolioName">Portfolio name.</param>
            <param name="adapter">The adapter.</param>
        </member>
        <member name="M:StockSharp.Messages.IMessageAdapterProvider.RemoveAssociation(System.String)">
            <summary>
            Remove association between portfolio name and adapter.
            </summary>
            <param name="portfolioName">Portfolio name.</param>
            <returns><see langword="true"/> if the association is successfully removed, otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:StockSharp.Messages.InMemoryMessageAdapterProvider">
            <summary>
            In memory message adapter's provider.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.InMemoryMessageAdapterProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.InMemoryMessageAdapterProvider"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.InMemoryMessageAdapterProvider.Adapters">
            <summary>
            All available adapters.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.InMemoryMessageAdapterProvider.GetAdapter(System.String)">
            <summary>
            Get adapter by portfolio name.
            </summary>
            <param name="portfolioName">Portfolio name.</param>
            <returns>The found adapter.</returns>
        </member>
        <member name="M:StockSharp.Messages.InMemoryMessageAdapterProvider.SetAdapter(System.String,StockSharp.Messages.IMessageAdapter)">
            <summary>
            Make association adapter and portfolio name.
            </summary>
            <param name="portfolioName">Portfolio name.</param>
            <param name="adapter">The adapter.</param>
        </member>
        <member name="M:StockSharp.Messages.InMemoryMessageAdapterProvider.RemoveAssociation(System.String)">
            <summary>
            Remove association between portfolio name and adapter.
            </summary>
            <param name="portfolioName">Portfolio name.</param>
            <returns><see langword="true"/> if the association is successfully removed, otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:StockSharp.Messages.IMessageAdapterWrapper">
            <summary>
            Wrapping based adapter.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageAdapterWrapper.InnerAdapter">
            <summary>
            Underlying adapter.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.MessageAdapterWrapper">
            <summary>
            Base implementation of <see cref="T:StockSharp.Messages.IMessageAdapterWrapper"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.MessageAdapterWrapper.#ctor(StockSharp.Messages.IMessageAdapter)">
            <summary>
            Initialize <see cref="T:StockSharp.Messages.MessageAdapterWrapper"/>.
            </summary>
            <param name="innerAdapter">Underlying adapter.</param>
        </member>
        <member name="P:StockSharp.Messages.MessageAdapterWrapper.InnerAdapter">
            <summary>
            Underlying adapter.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MessageAdapterWrapper.OwnInnerAdaper">
            <summary>
            Control <see cref="P:StockSharp.Messages.MessageAdapterWrapper.InnerAdapter"/> lifetime.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.MessageAdapterWrapper.OnInnerAdapterNewOutMessage(StockSharp.Messages.Message)">
            <summary>
            Process <see cref="P:StockSharp.Messages.MessageAdapterWrapper.InnerAdapter"/> output message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:StockSharp.Messages.MessageAdapterWrapper.RaiseNewOutMessage(StockSharp.Messages.Message)">
            <summary>
            To call the event <see cref="E:StockSharp.Messages.MessageAdapterWrapper.NewOutMessage"/>.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:StockSharp.Messages.MessageAdapterWrapper.SendInMessage(StockSharp.Messages.Message)">
            <summary>
            Send message.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="E:StockSharp.Messages.MessageAdapterWrapper.NewOutMessage">
            <summary>
            New message event.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.MessageAdapterWrapper.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.InMemoryMessageChannel">
            <summary>
            Message channel, based on the queue and operate within a single process.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.InMemoryMessageChannel.#ctor(System.String,System.Action{System.Exception})">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.InMemoryMessageChannel"/>.
            </summary>
            <param name="name">Channel name.</param>
            <param name="errorHandler">Error handler.</param>
        </member>
        <member name="P:StockSharp.Messages.InMemoryMessageChannel.Name">
            <summary>
            Handler name.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.InMemoryMessageChannel.MessageCount">
            <summary>
            Message queue count.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.InMemoryMessageChannel.MaxMessageCount">
            <summary>
            Max message queue count.
            </summary>
            <remarks>
            The default value is -1, which corresponds to the size without limitations.
            </remarks>
        </member>
        <member name="E:StockSharp.Messages.InMemoryMessageChannel.Closed">
            <summary>
            Channel closing event.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.InMemoryMessageChannel.IsOpened">
            <summary>
            Is channel opened.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.InMemoryMessageChannel.Open">
            <summary>
            Open channel.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.InMemoryMessageChannel.Close">
            <summary>
            Close channel.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.InMemoryMessageChannel.SendInMessage(StockSharp.Messages.Message)">
            <summary>
            Send message.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="E:StockSharp.Messages.InMemoryMessageChannel.NewOutMessage">
            <summary>
            New message event.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.InMemoryMessageChannel.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.InMemoryMessageChannel"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Messages.IOrderLogMarketDepthBuilder">
            <summary>
            Base interface for order book builder.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IOrderLogMarketDepthBuilder.Depth">
            <summary>
            Market depth.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.IOrderLogMarketDepthBuilder.Update(StockSharp.Messages.ExecutionMessage)">
            <summary>
            Process order log item.
            </summary>
            <param name="item">Order log item.</param>
            <returns>Order book was changed.</returns>
        </member>
        <member name="T:StockSharp.Messages.MessagePriorityQueue">
            <summary>
            Sorted by <see cref="P:StockSharp.Messages.Message.LocalTime"/> queue.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.MessagePriorityQueue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.MessagePriorityQueue"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.MessagePriorityQueue.TryDequeue(StockSharp.Messages.Message@,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="exitOnClose"></param>
            <param name="block"></param>
            <returns></returns>
        </member>
        <member name="M:StockSharp.Messages.MessagePriorityQueue.Enqueue(StockSharp.Messages.Message)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:StockSharp.Messages.MessagePriorityQueue.OnEnqueue(System.Collections.Generic.KeyValuePair{System.Int64,StockSharp.Messages.Message},System.Boolean)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="force"></param>
        </member>
        <member name="M:StockSharp.Messages.MessagePriorityQueue.OnDequeue">
            <summary>
            Dequeue the next element.
            </summary>
            <returns>The next element.</returns>
        </member>
        <member name="M:StockSharp.Messages.MessagePriorityQueue.OnPeek">
            <summary>
            To get from top the current element.
            </summary>
            <returns>The current element.</returns>
        </member>
        <member name="T:StockSharp.Messages.ReConnectionSettings">
            <summary>
            Connection tracking settings <see cref="T:StockSharp.Messages.IMessageAdapter"/> with a server.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.ReConnectionSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.ReConnectionSettings"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ReConnectionSettings.Interval">
            <summary>
            The interval at which attempts will establish a connection. The default value is 10 seconds.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ReConnectionSettings.AttemptCount">
            <summary>
            The number of attempts to establish the initial connection, if it has not been established (timeout, network failure, etc.). The default value is 0. To establish infinite number uses -1.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ReConnectionSettings.ReAttemptCount">
            <summary>
            The number of attempts to reconnect if the connection was lost during the operation. The default value is 100. To establish infinite number uses -1.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ReConnectionSettings.TimeOutInterval">
            <summary>
            Timeout successful connection / disconnection. If the value is <see cref="F:System.TimeSpan.Zero"/>, the monitoring is performed. The default value is 30 seconds.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ReConnectionSettings.WorkingTime">
            <summary>
            Schedule, during which it is necessary to make the connection. For example, there is no need to track connection when trading on the exchange finished.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.ReConnectionSettings.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Messages.ReConnectionSettings.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="T:StockSharp.Messages.ResetMessage">
            <summary>
            Reset state message.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.ResetMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.ResetMessage"/>.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.TargetPlatformAttribute">
            <summary>
            Features.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.TargetPlatformAttribute.PreferLanguage">
            <summary>
            The target audience.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.TargetPlatformAttribute.Platform">
            <summary>
            Platform.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.TargetPlatformAttribute.#ctor(Ecng.Localization.Languages,Ecng.Interop.Platforms)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.TargetPlatformAttribute"/>.
            </summary>
            <param name="preferLanguage">The target audience.</param>
            <param name="platform">Platform.</param>
        </member>
        <member name="T:StockSharp.Messages.IMessageChannel">
            <summary>
            Message channel base interface.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.IMessageChannel.IsOpened">
            <summary>
            Is channel opened.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.IMessageChannel.Open">
            <summary>
            Open channel.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.IMessageChannel.Close">
            <summary>
            Close channel.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.IMessageChannel.SendInMessage(StockSharp.Messages.Message)">
            <summary>
            Send message.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="E:StockSharp.Messages.IMessageChannel.NewOutMessage">
            <summary>
            New message event.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.PassThroughMessageChannel">
            <summary>
            Message channel, which passes directly to the output all incoming messages.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.PassThroughMessageChannel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.PassThroughMessageChannel"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.PassThroughMessageChannel.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.PassThroughMessageChannel"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Messages.BaseChangeMessage`1">
            <summary>
            A message containing changes.
            </summary>
            <typeparam name="TField">Changes type.</typeparam>
        </member>
        <member name="P:StockSharp.Messages.BaseChangeMessage`1.ServerTime">
            <summary>
            Change server time.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.BaseChangeMessage`1.Changes">
            <summary>
            Changes.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.BaseChangeMessage`1.#ctor(StockSharp.Messages.MessageTypes)">
            <summary>
            Initialize <see cref="T:StockSharp.Messages.BaseChangeMessage`1"/>.
            </summary>
            <param name="type">Data type.</param>
        </member>
        <member name="M:StockSharp.Messages.BaseChangeMessage`1.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:StockSharp.Messages.ErrorMessage">
            <summary>
            Error message.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.ErrorMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.ErrorMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.ErrorMessage.Error">
            <summary>
            Error info.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.ErrorMessage.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:StockSharp.Messages.ErrorMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.ErrorMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Messages.MessageAdapter">
            <summary>
            The base adapter converts messages <see cref="T:StockSharp.Messages.Message"/> to the command of the trading system and back.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.MessageAdapter.#ctor(Ecng.Common.IdGenerator)">
            <summary>
            Initialize <see cref="T:StockSharp.Messages.MessageAdapter"/>.
            </summary>
            <param name="transactionIdGenerator">Transaction id generator.</param>
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.SupportedMessages">
            <summary>
            Supported by adapter message types.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.IsValid">
            <summary>
            The parameters validity check.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.SecurityClassInfo">
            <summary>
            Description of the class of securities, depending on which will be marked in the <see cref="P:StockSharp.Messages.SecurityMessage.SecurityType"/> and <see cref="P:StockSharp.Messages.SecurityId.BoardCode"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.HeartbeatInterval">
            <summary>
            Server check interval for track the connection alive. The value is <see cref="F:System.TimeSpan.Zero"/> turned off tracking.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.SecurityLookupRequired">
            <summary>
            <see cref="T:StockSharp.Messages.SecurityLookupMessage"/> required to get securities.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.PortfolioLookupRequired">
            <summary>
            <see cref="T:StockSharp.Messages.PortfolioLookupMessage"/> required to get portfolios and positions.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.OrderStatusRequired">
            <summary>
            <see cref="T:StockSharp.Messages.OrderStatusMessage"/> required to get orders and ow trades.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.IsNativeIdentifiersPersistable">
            <summary>
            Native identifier can be stored.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.IsNativeIdentifiers">
            <summary>
            Identify security in messages by native identifier <see cref="P:StockSharp.Messages.SecurityId.Native"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.StorageName">
            <summary>
            The storage name, associated with the adapter.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.OrderCancelVolumeRequired">
            <summary>
            <see cref="P:StockSharp.Messages.OrderCancelMessage.Volume"/> required to cancel orders.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.IsSupportNativeSecurityLookup">
            <summary>
            Gets a value indicating whether the connector supports security lookup.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.IsSupportNativePortfolioLookup">
            <summary>
            Gets a value indicating whether the connector supports position lookup.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.Platform">
            <summary>
            Bit process, which can run the adapter. By default is <see cref="F:Ecng.Interop.Platforms.AnyCPU"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.SecurityExtendedFields">
            <summary>
            Names of extended security fields in <see cref="T:StockSharp.Messages.SecurityMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.MessageAdapter.CreateOrderCondition">
            <summary>
            Create condition for order type <see cref="F:StockSharp.Messages.OrderTypes.Conditional"/>, that supports the adapter.
            </summary>
            <returns>Order condition. If the connection does not support the order type <see cref="F:StockSharp.Messages.OrderTypes.Conditional"/>, it will be returned <see langword="null" />.</returns>
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.ReConnectionSettings">
            <summary>
            Connection tracking settings <see cref="T:StockSharp.Messages.IMessageAdapter"/> with a server.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.TransactionIdGenerator">
            <summary>
            Transaction id generator.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.LookupTimeOut">
            <summary>
            Securities and portfolios lookup timeout.
            </summary>
            <remarks>
            By defaut is 10 seconds.
            </remarks>
        </member>
        <member name="P:StockSharp.Messages.MessageAdapter.AssociatedBoardCode">
            <summary>
            Associated board code. The default is ALL.
            </summary>
        </member>
        <member name="E:StockSharp.Messages.MessageAdapter.NewOutMessage">
            <summary>
            Outgoing message event.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.MessageAdapter.SendInMessage(StockSharp.Messages.Message)">
            <summary>
            Send incoming message.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:StockSharp.Messages.MessageAdapter.OnSendInMessage(StockSharp.Messages.Message)">
            <summary>
            Send message.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:StockSharp.Messages.MessageAdapter.SendOutMessage(StockSharp.Messages.Message)">
            <summary>
            Send outgoing message and raise <see cref="E:StockSharp.Messages.MessageAdapter.NewOutMessage"/> event.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:StockSharp.Messages.MessageAdapter.InitMessageLocalTime(StockSharp.Messages.Message)">
            <summary>
            Initialize local timestamp <see cref="T:StockSharp.Messages.Message"/>.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:StockSharp.Messages.MessageAdapter.SendOutError(System.String)">
            <summary>
            Initialize a new message <see cref="T:StockSharp.Messages.ErrorMessage"/> and pass it to the method <see cref="M:StockSharp.Messages.MessageAdapter.SendOutMessage(StockSharp.Messages.Message)"/>.
            </summary>
            <param name="description">Error detais.</param>
        </member>
        <member name="M:StockSharp.Messages.MessageAdapter.SendOutError(System.Exception)">
            <summary>
            Initialize a new message <see cref="T:StockSharp.Messages.ErrorMessage"/> and pass it to the method <see cref="M:StockSharp.Messages.MessageAdapter.SendOutMessage(StockSharp.Messages.Message)"/>.
            </summary>
            <param name="error">Error detais.</param>
        </member>
        <member name="M:StockSharp.Messages.MessageAdapter.SendOutSecurityMessage(StockSharp.Messages.SecurityId)">
            <summary>
            Initialize a new message <see cref="T:StockSharp.Messages.SecurityMessage"/> and pass it to the method <see cref="M:StockSharp.Messages.MessageAdapter.SendOutMessage(StockSharp.Messages.Message)"/>.
            </summary>
            <param name="securityId">Security ID.</param>
        </member>
        <member name="M:StockSharp.Messages.MessageAdapter.SendOutMarketDataNotSupported(System.Int64)">
            <summary>
            Initialize a new message <see cref="T:StockSharp.Messages.SecurityMessage"/> and pass it to the method <see cref="M:StockSharp.Messages.MessageAdapter.SendOutMessage(StockSharp.Messages.Message)"/>.
            </summary>
            <param name="originalTransactionId">ID of the original message for which this message is a response.</param>
        </member>
        <member name="M:StockSharp.Messages.MessageAdapter.IsConnectionAlive">
            <summary>
            Check the connection is alive. Uses only for connected states.
            </summary>
            <returns><see langword="true" />, is the connection still alive, <see langword="false" />, if the connection was rejected.</returns>
        </member>
        <member name="M:StockSharp.Messages.MessageAdapter.CreateOrderLogMarketDepthBuilder(StockSharp.Messages.SecurityId)">
            <summary>
            Create market depth builder.
            </summary>
            <param name="securityId">Security ID.</param>
            <returns>Order log to market depth builder.</returns>
        </member>
        <member name="M:StockSharp.Messages.MessageAdapter.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Messages.MessageAdapter.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Messages.MessageAdapter.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.MessageAdapter"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Messages.PassThroughMessageAdapter">
            <summary>
            Special adapter, which transmits directly to the output of all incoming messages.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.PassThroughMessageAdapter.#ctor(Ecng.Common.IdGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.PassThroughMessageAdapter"/>.
            </summary>
            <param name="transactionIdGenerator">Transaction id generator.</param>
        </member>
        <member name="M:StockSharp.Messages.PassThroughMessageAdapter.OnSendInMessage(StockSharp.Messages.Message)">
            <summary>
            Send message.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="T:StockSharp.Messages.MessageTypes">
            <summary>
            The types of messages.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.Security">
            <summary>
            Security info.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.Level1Change">
            <summary>
            Level1 market-data changes.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.OrderRegister">
            <summary>
            Register new order.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.OrderReplace">
            <summary>
            Modify order.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.OrderPairReplace">
            <summary>
            Pair order move.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.OrderCancel">
            <summary>
            Cancel order.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.OrderGroupCancel">
            <summary>
            Order group cancel.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.Time">
            <summary>
            Time change.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.News">
            <summary>
            News.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.OrderError">
            <summary>
            Order error (registration or cancel).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.Portfolio">
            <summary>
            Portfolio.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.Position">
            <summary>
            Position.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.CandleTimeFrame">
            <summary>
            Candle (time-frame).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.QuoteChange">
            <summary>
            Quotes change.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.Execution">
            <summary>
            Order execution.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.PositionChange">
            <summary>
            Position change.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.PortfolioChange">
            <summary>
            Portfolio change.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.MarketData">
            <summary>
            Subscribe/unsubscribe market-data.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.NativeSecurityId">
            <summary>
            Association <see cref="T:StockSharp.Messages.SecurityId"/> with <see cref="P:StockSharp.Messages.SecurityId.Native"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.Connect">
            <summary>
            Connection string.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.Disconnect">
            <summary>
            Disconnect.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.SecurityLookup">
            <summary>
            Securities search.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.PortfolioLookup">
            <summary>
            Portfolio lookup.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.SecurityLookupResult">
            <summary>
            Security lookup result.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.Error">
            <summary>
            Error.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.Session">
            <summary>
            Session.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.OrderStatus">
            <summary>
            Order state request.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.Board">
            <summary>
            Electronic board info.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.PortfolioLookupResult">
            <summary>
            Portfolio lookup result.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.ChangePassword">
            <summary>
            Password change.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.ClearQueue">
            <summary>
            Clear message queue.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.CandleTick">
            <summary>
            Candle (tick).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.CandleVolume">
            <summary>
            Candle (volume).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.CandleRange">
            <summary>
            Candle (range).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.CandlePnF">
            <summary>
            Candle (X&amp;0).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.CandleRenko">
            <summary>
            Candle (renko).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.Reset">
            <summary>
            Reset state.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MessageTypes.MarketDataFinished">
            <summary>
            Market data request finished.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.Message">
            <summary>
            A message containing market data or command.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.Message.LocalTime">
            <summary>
            Local timestamp when a message was received/created.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.Message.Type">
            <summary>
            Message type.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.Message.ExtensionInfo">
            <summary>
            Extended information.
            </summary>
            <remarks>
            Necessary to keep additional information associated with the message.
            </remarks>
        </member>
        <member name="P:StockSharp.Messages.Message.IsBack">
            <summary>
            Is loopback message.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.Message.Adapter">
            <summary>
            Source adapter. Can be <see langword="null" />.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.Message.#ctor(StockSharp.Messages.MessageTypes)">
            <summary>
            Initialize <see cref="T:StockSharp.Messages.Message"/>.
            </summary>
            <param name="type">Message type.</param>
        </member>
        <member name="M:StockSharp.Messages.Message.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:StockSharp.Messages.Message.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.Message"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Messages.NewsMessage">
            <summary>
            The message contains information about the news.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.NewsMessage.Id">
            <summary>
            News ID.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.NewsMessage.BoardCode">
            <summary>
            Electronic board code.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.NewsMessage.SecurityId">
            <summary>
            Security ID, for which news have been published.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.NewsMessage.Source">
            <summary>
            News source.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.NewsMessage.Headline">
            <summary>
            Header.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.NewsMessage.Story">
            <summary>
            News text.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.NewsMessage.ServerTime">
            <summary>
            Time of news arrival.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.NewsMessage.Url">
            <summary>
            News link in the internet.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.NewsMessage.OriginalTransactionId">
            <summary>
            ID of the original message <see cref="P:StockSharp.Messages.MarketDataMessage.TransactionId"/> for which this message is a response.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.NewsMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.NewsMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.NewsMessage.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:StockSharp.Messages.NewsMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.NewsMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Messages.OptionTypes">
            <summary>
            Option types.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OptionTypes.Call">
            <summary>
            Call.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OptionTypes.Put">
            <summary>
            Put.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.OrderCancelMessage">
            <summary>
            A message containing the data for the cancellation of the order.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderCancelMessage.OrderId">
            <summary>
            ID cancellation order.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderCancelMessage.OrderStringId">
            <summary>
            Cancelling order id (as a string if the electronic board does not use a numeric representation of the identifiers).
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderCancelMessage.OrderTransactionId">
            <summary>
            Transaction ID cancellation order.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderCancelMessage.Volume">
            <summary>
            Cancelling volume. If not specified, then it canceled the entire balance.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderCancelMessage.Side">
            <summary>
            Order side.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.OrderCancelMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.OrderCancelMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.OrderCancelMessage.#ctor(StockSharp.Messages.MessageTypes)">
            <summary>
            Initialize <see cref="T:StockSharp.Messages.OrderCancelMessage"/>.
            </summary>
            <param name="type">Message type.</param>
        </member>
        <member name="M:StockSharp.Messages.OrderCancelMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.OrderCancelMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.OrderCancelMessage.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:StockSharp.Messages.OrderCondition">
            <summary>
            Base order condition (for example, for stop order algo orders).
            </summary>
        </member>
        <member name="M:StockSharp.Messages.OrderCondition.#ctor">
            <summary>
            Initialize <see cref="T:StockSharp.Messages.OrderCondition"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderCondition.Parameters">
            <summary>
            Condition parameters.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.OrderCondition.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.OrderCondition"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Messages.OrderGroupCancelMessage">
            <summary>
            The message containing the order group cancel filter.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderGroupCancelMessage.IsStop">
            <summary>
            <see langword="true" />, if cancel only a stop orders, <see langword="false" /> - if regular orders, <see langword="null" /> - both.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderGroupCancelMessage.Side">
            <summary>
            Order side. If the value is <see langword="null" />, the direction does not use.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.OrderGroupCancelMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.OrderGroupCancelMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.OrderGroupCancelMessage.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:StockSharp.Messages.OrderGroupCancelMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.OrderGroupCancelMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Messages.OrderMessage">
            <summary>
            A message containing info about the order.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderMessage.TransactionId">
            <summary>
            Transaction ID.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderMessage.PortfolioName">
            <summary>
            Portfolio name, for which an order must be placed/cancelled.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderMessage.OrderType">
            <summary>
            Order type.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderMessage.UserOrderId">
            <summary>
            User's order ID.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderMessage.BrokerCode">
            <summary>
            Broker firm code.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderMessage.ClientCode">
            <summary>
            Client code assigned by the broker.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderMessage.Condition">
            <summary>
            Order condition (e.g., stop- and algo- orders parameters).
            </summary>
        </member>
        <member name="M:StockSharp.Messages.OrderMessage.#ctor(StockSharp.Messages.MessageTypes)">
            <summary>
            Initialize <see cref="T:StockSharp.Messages.OrderMessage"/>.
            </summary>
            <param name="type">Message type.</param>
        </member>
        <member name="T:StockSharp.Messages.OrderPairReplaceMessage">
            <summary>
            The message containing the information for modify order's pair.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderPairReplaceMessage.Message1">
            <summary>
            The message containing the information for modify the first order.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderPairReplaceMessage.Message2">
            <summary>
            The message containing the information for modify the second order.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.OrderPairReplaceMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.OrderPairReplaceMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.OrderPairReplaceMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.OrderPairReplaceMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.OrderPairReplaceMessage.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:StockSharp.Messages.OrderRegisterMessage">
            <summary>
            The message containing the information for the order registration.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderRegisterMessage.Price">
            <summary>
            Order price.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderRegisterMessage.Volume">
            <summary>
            Number of contracts in the order.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderRegisterMessage.VisibleVolume">
            <summary>
            Visible quantity of contracts in order.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderRegisterMessage.Side">
            <summary>
            Order side (buy or sell).
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderRegisterMessage.Comment">
            <summary>
            Placed order comment.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderRegisterMessage.TillDate">
            <summary>
            Order expiry time. The default is <see langword="null" />, which mean (GTC).
            </summary>
            <remarks>
            If the value is equal <see langword="null" /> or <see cref="F:System.DateTimeOffset.MaxValue"/>, order will be GTC (good til cancel). Or uses exact date.
            </remarks>
        </member>
        <member name="P:StockSharp.Messages.OrderRegisterMessage.TimeInForce">
            <summary>
            Limit order time in force.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderRegisterMessage.RepoInfo">
            <summary>
            Information for REPO\REPO-M orders.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderRegisterMessage.RpsInfo">
            <summary>
            Information for Negotiate Deals Mode orders.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.OrderRegisterMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.OrderRegisterMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.OrderRegisterMessage.#ctor(StockSharp.Messages.MessageTypes)">
            <summary>
            Initialize <see cref="T:StockSharp.Messages.OrderRegisterMessage"/>.
            </summary>
            <param name="type">Message type.</param>
        </member>
        <member name="M:StockSharp.Messages.OrderRegisterMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.OrderRegisterMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.OrderRegisterMessage.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:StockSharp.Messages.OrderReplaceMessage">
            <summary>
            The message containing the information for modify order.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderReplaceMessage.OldOrderId">
            <summary>
            Modified order id.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderReplaceMessage.OldOrderStringId">
            <summary>
            Modified order id (as a string if the electronic board does not use a numeric representation of the identifiers).
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderReplaceMessage.OldTransactionId">
            <summary>
            Modified order transaction id.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.OrderReplaceMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.OrderReplaceMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.OrderReplaceMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.OrderReplaceMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.OrderReplaceMessage.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:StockSharp.Messages.OrderStates">
            <summary>
            Order states.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderStates.None">
            <summary>
            Not sent to the trading system.
            </summary>
            <remarks>
            The original state of the order, when the transaction is not sent to the trading system.
            </remarks>
        </member>
        <member name="F:StockSharp.Messages.OrderStates.Active">
            <summary>
            The order is accepted by the exchange and is active.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderStates.Done">
            <summary>
            The order is no longer active on an exchange (it was fully matched or cancelled).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderStates.Failed">
            <summary>
            The order is not accepted by the trading system.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderStates.Pending">
            <summary>
            Pending acception.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.OrderStatus">
            <summary>
            System order states.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderStatus.SentToServer">
            <summary>
            The transaction is sent to the server.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderStatus.ReceiveByServer">
            <summary>
            The transaction is received by the server.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderStatus.GateError">
            <summary>
            Sending transaction error.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderStatus.Accepted">
            <summary>
            The order is accepted by the exchange.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderStatus.NotDone">
            <summary>
            The order is not accepted by the exchange.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderStatus.NotValidated">
            <summary>
            The transaction did not pass server check.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderStatus.NotValidatedLimit">
            <summary>
            The transaction did not pass server limits.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderStatus.AcceptedByManager">
            <summary>
            The transaction was approved by manager.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderStatus.NotAcceptedByManager">
            <summary>
            The transaction did not approved by manager.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderStatus.CanceledByManager">
            <summary>
            The transaction was cancelled by manager.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderStatus.NotSupported">
            <summary>
            The transaction is not supported by server.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderStatus.NotSigned">
            <summary>
            Digital signature fail.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderStatus.SentToCanceled">
            <summary>
            Cancel pending.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderStatus.Cancelled">
            <summary>
            Cancelled.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderStatus.Matched">
            <summary>
            Matched.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderStatus.RejectedBySystem">
            <summary>
            Reject by server.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.OrderStatusMessage">
            <summary>
            A message requesting current registered orders and trades.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderStatusMessage.From">
            <summary>
            Start date, from which data needs to be retrieved.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.OrderStatusMessage.To">
            <summary>
            End date, until which data needs to be retrieved.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.OrderStatusMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.OrderStatusMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.OrderStatusMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.OrderStatusMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.OrderStatusMessage.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:StockSharp.Messages.OrderTypes">
            <summary>
            Order types.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderTypes.Limit">
            <summary>
            Limit.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderTypes.Market">
            <summary>
            Market.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderTypes.Conditional">
            <summary>
            Conditional (stop-loss, take-profit).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderTypes.Repo">
            <summary>
            The order for REPO.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderTypes.ExtRepo">
            <summary>
            The order for modified REPO (REPO-M).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderTypes.Rps">
            <summary>
            Order for OTC trade.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.OrderTypes.Execute">
            <summary>
            Execution order to settlement contracts (such as options).
            </summary>
        </member>
        <member name="T:StockSharp.Messages.PortfolioChangeMessage">
            <summary>
            Messages containing changes to the position.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.PortfolioChangeMessage.PortfolioName">
            <summary>
            Portfolio name.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.PortfolioChangeMessage.BoardCode">
            <summary>
            Electronic board code.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.PortfolioChangeMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.PortfolioChangeMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.PortfolioChangeMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.PortfolioChangeMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.PortfolioChangeMessage.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:StockSharp.Messages.PortfolioLookupMessage">
            <summary>
            Message security lookup for specified criteria.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.PortfolioLookupMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.PortfolioLookupMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.PortfolioLookupMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.PortfolioLookupMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.PortfolioLookupMessage.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:StockSharp.Messages.PortfolioLookupResultMessage">
            <summary>
            Portfolio lookup result message.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.PortfolioLookupResultMessage.OriginalTransactionId">
            <summary>
            ID of the original message <see cref="P:StockSharp.Messages.PortfolioMessage.TransactionId"/> for which this message is a response.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.PortfolioLookupResultMessage.Error">
            <summary>
            Portfolio lookup error info.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.PortfolioLookupResultMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.PortfolioLookupResultMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.PortfolioLookupResultMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.PortfolioLookupResultMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.PortfolioLookupResultMessage.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:StockSharp.Messages.PortfolioStates">
            <summary>
            Portfolio states.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.PortfolioStates.Active">
            <summary>
            Active.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.PortfolioStates.Blocked">
            <summary>
            Blocked.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.PortfolioMessage">
            <summary>
            The message contains information about portfolio.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.PortfolioMessage.PortfolioName">
            <summary>
            Portfolio code name.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.PortfolioMessage.Currency">
            <summary>
            Portfolio currency.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.PortfolioMessage.BoardCode">
            <summary>
            Electronic board code.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.PortfolioMessage.State">
            <summary>
            Portfolio state.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.PortfolioMessage.OriginalTransactionId">
            <summary>
            ID of the original message <see cref="P:StockSharp.Messages.PortfolioMessage.TransactionId"/> for which this message is a response.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.PortfolioMessage.TransactionId">
            <summary>
            Subscription/unsubscription portfolio changes transaction id.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.PortfolioMessage.IsSubscribe">
            <summary>
            Is the message subscription portfolio changes.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.PortfolioMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.PortfolioMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.PortfolioMessage.#ctor(StockSharp.Messages.MessageTypes)">
            <summary>
            Initialize <see cref="T:StockSharp.Messages.PortfolioMessage"/>.
            </summary>
            <param name="type">Message type.</param>
        </member>
        <member name="M:StockSharp.Messages.PortfolioMessage.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:StockSharp.Messages.PortfolioMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.PortfolioMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.PortfolioMessage.CopyTo(StockSharp.Messages.PortfolioMessage)">
            <summary>
            Copy the message into the <paramref name="destination" />.
            </summary>
            <param name="destination">The object, which copied information.</param>
        </member>
        <member name="T:StockSharp.Messages.PositionChangeTypes">
            <summary>
            Type of the changes in <see cref="T:StockSharp.Messages.PositionChangeMessage"/>.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.PositionChangeTypes.BeginValue">
            <summary>
            Initial value.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.PositionChangeTypes.CurrentValue">
            <summary>
            Current value.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.PositionChangeTypes.BlockedValue">
            <summary>
            Blocked.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.PositionChangeTypes.CurrentPrice">
            <summary>
            Position price.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.PositionChangeTypes.AveragePrice">
            <summary>
            Average price.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.PositionChangeTypes.UnrealizedPnL">
            <summary>
            Unrealized profit.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.PositionChangeTypes.RealizedPnL">
            <summary>
            Realized profit.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.PositionChangeTypes.VariationMargin">
            <summary>
            Variation margin.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.PositionChangeTypes.Currency">
            <summary>
            Currency.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.PositionChangeTypes.ExtensionInfo">
            <summary>
            Extended information.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.PositionChangeTypes.Leverage">
            <summary>
            Margin leverage.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.PositionChangeTypes.Commission">
            <summary>
            Total commission.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.PositionChangeTypes.CurrentValueInLots">
            <summary>
            Current value (in lots).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.PositionChangeTypes.DepoName">
            <summary>
            The depositary where the physical security.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.PositionChangeTypes.State">
            <summary>
            Portfolio state.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.PositionChangeMessage">
            <summary>
            The message contains information about the position changes.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.PositionChangeMessage.SecurityId">
            <summary>
            Security ID.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.PositionChangeMessage.PortfolioName">
            <summary>
            Portfolio name.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.PositionChangeMessage.ClientCode">
            <summary>
            Client code assigned by the broker.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.PositionChangeMessage.DepoName">
            <summary>
            The depositary where the physical security.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.PositionChangeMessage.LimitType">
            <summary>
            Limit type for Т+ market.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.PositionChangeMessage.Description">
            <summary>
            Text position description.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.PositionChangeMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.PositionChangeMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.PositionChangeMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.PositionChangeMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.PositionChangeMessage.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:StockSharp.Messages.PositionMessage">
            <summary>
            The message contains information about the position.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.PositionMessage.PortfolioName">
            <summary>
            Portfolio, in which position is created.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.PositionMessage.ClientCode">
            <summary>
            Client code assigned by the broker.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.PositionMessage.Description">
            <summary>
            Text position description.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.PositionMessage.SecurityId">
            <summary>
            Security, for which a position was created.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.PositionMessage.DepoName">
            <summary>
            The depositary where the physical security.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.PositionMessage.LimitType">
            <summary>
            Limit type for Т+ market.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.PositionMessage.OriginalTransactionId">
            <summary>
            ID of the original message <see cref="P:StockSharp.Messages.PortfolioMessage.TransactionId"/> for which this message is a response.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.PositionMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.PositionMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.PositionMessage.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:StockSharp.Messages.PositionMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.PositionMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Messages.QuoteChange">
            <summary>
            Market depth quote representing bid or ask.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.QuoteChange.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.QuoteChange"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.QuoteChange.#ctor(StockSharp.Messages.Sides,System.Decimal,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.QuoteChange"/>.
            </summary>
            <param name="side">Direction (buy or sell).</param>
            <param name="price">Quote price.</param>
            <param name="volume">Quote volume.</param>
        </member>
        <member name="P:StockSharp.Messages.QuoteChange.Price">
            <summary>
            Quote price.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.QuoteChange.Volume">
            <summary>
            Quote volume.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.QuoteChange.Side">
            <summary>
            Direction (buy or sell).
            </summary>
        </member>
        <member name="P:StockSharp.Messages.QuoteChange.BoardCode">
            <summary>
            Electronic board code.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.QuoteChange.ExtensionInfo">
            <summary>
            Extended quote info.
            </summary>
            <remarks>
            Uses in case of keep additional information associated with the quotation. For example, the number of contracts in its own order book, the amount of the best buying and selling.
            </remarks>
        </member>
        <member name="M:StockSharp.Messages.QuoteChange.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.QuoteChange"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.QuoteChange.OnEquals(StockSharp.Messages.QuoteChange)">
            <summary>
            Compare <see cref="T:StockSharp.Messages.QuoteChange"/> on the equivalence.
            </summary>
            <param name="other">Another value with which to compare.</param>
            <returns><see langword="true" />, if the specified object is equal to the current object, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Messages.QuoteChange.GetHashCode">
            <summary>
            Get the hash code of the object <see cref="T:StockSharp.Messages.QuoteChange"/>.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:StockSharp.Messages.QuoteChange.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:StockSharp.Messages.QuoteChangeMessage">
            <summary>
            Messages containing quotes.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.QuoteChangeMessage.SecurityId">
            <summary>
            Security ID.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.QuoteChangeMessage.Bids">
            <summary>
            Quotes to buy.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.QuoteChangeMessage.Asks">
            <summary>
            Quotes to sell.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.QuoteChangeMessage.ServerTime">
            <summary>
            Change server time.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.QuoteChangeMessage.IsSorted">
            <summary>
            Flag sorted by price quotes (<see cref="P:StockSharp.Messages.QuoteChangeMessage.Bids"/> by descending, <see cref="P:StockSharp.Messages.QuoteChangeMessage.Asks"/> by ascending).
            </summary>
        </member>
        <member name="P:StockSharp.Messages.QuoteChangeMessage.IsByLevel1">
            <summary>
            The quote change was build by level1.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.QuoteChangeMessage.IsFiltered">
            <summary>
            The quote change contains filtered quotes.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.QuoteChangeMessage.Currency">
            <summary>
            Trading security currency.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.QuoteChangeMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.QuoteChangeMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.QuoteChangeMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.QuoteChangeMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.QuoteChangeMessage.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:StockSharp.Messages.Level1Fields">
            <summary>
            Level1 fields of market-data.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.OpenPrice">
            <summary>
            Opening price.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.HighPrice">
            <summary>
            Greatest price.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.LowPrice">
            <summary>
            Lowest price.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.ClosePrice">
            <summary>
            Closing price.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.LastTrade">
            <summary>
            Last trade.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.StepPrice">
            <summary>
            Step price.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.BestBid">
            <summary>
            Best bid.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.BestAsk">
            <summary>
            Best ask.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.ImpliedVolatility">
            <summary>
            Volatility (implied).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.TheorPrice">
            <summary>
            Theoretical price.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.OpenInterest">
            <summary>
            Open interest.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.MinPrice">
            <summary>
            Price (min).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.MaxPrice">
            <summary>
            Price (max).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.BidsVolume">
            <summary>
            Bids volume.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.BidsCount">
            <summary>
            Number of bids.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.AsksVolume">
            <summary>
            Ask volume.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.AsksCount">
            <summary>
            Number of asks.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.HistoricalVolatility">
            <summary>
            Volatility (historical).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.Delta">
            <summary>
            Delta.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.Gamma">
            <summary>
            Gamma.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.Vega">
            <summary>
            Vega.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.Theta">
            <summary>
            Theta.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.MarginBuy">
            <summary>
            Initial margin (buy).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.MarginSell">
            <summary>
            Initial margin (sell).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.PriceStep">
            <summary>
            Minimum price step.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.VolumeStep">
            <summary>
            Minimum volume step.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.ExtensionInfo">
            <summary>
            Extended information.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.State">
            <summary>
            State.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.LastTradePrice">
            <summary>
            Last trade price.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.LastTradeVolume">
            <summary>
            Last trade volume.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.Volume">
            <summary>
            Volume per session.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.AveragePrice">
            <summary>
            Average price per session.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.SettlementPrice">
            <summary>
            Settlement price.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.Change">
            <summary>
            Change,%.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.BestBidPrice">
            <summary>
            Best bid price.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.BestBidVolume">
            <summary>
            Best buy volume.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.BestAskPrice">
            <summary>
            Best ask price.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.BestAskVolume">
            <summary>
            Best sell volume.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.Rho">
            <summary>
            Rho.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.AccruedCouponIncome">
            <summary>
            Accrued coupon income (ACI).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.HighBidPrice">
            <summary>
            Maximum bid during the session.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.LowAskPrice">
            <summary>
            Maximum ask during the session.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.Yield">
            <summary>
            Yield.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.LastTradeTime">
            <summary>
            Time of last trade.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.TradesCount">
            <summary>
            Number of trades.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.VWAP">
            <summary>
            Average price.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.LastTradeId">
            <summary>
            Last trade ID.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.BestBidTime">
            <summary>
            Best bid time.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.BestAskTime">
            <summary>
            Best ask time.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.LastTradeUpDown">
            <summary>
            Is tick ascending or descending in price.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.LastTradeOrigin">
            <summary>
            Initiator of the last trade (buyer or seller).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.Multiplier">
            <summary>
            Lot multiplier.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.PriceEarnings">
            <summary>
            Price/profit.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.ForwardPriceEarnings">
            <summary>
            Price target/profit.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.PriceEarningsGrowth">
            <summary>
            Price/profit (increase).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.PriceSales">
            <summary>
            Price/buy.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.PriceBook">
            <summary>
            Price/sell.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.PriceCash">
            <summary>
            Price/amount.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.PriceFreeCash">
            <summary>
            Price/amount (free).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.Payout">
            <summary>
            Payments.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.SharesOutstanding">
            <summary>
            Number of shares.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.SharesFloat">
            <summary>
            Shares Float.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.FloatShort">
            <summary>
            Float Short.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.ShortRatio">
            <summary>
            Short.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.ReturnOnAssets">
            <summary>
            Return on assets.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.ReturnOnEquity">
            <summary>
            Return on equity.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.ReturnOnInvestment">
            <summary>
            Return on investment.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.CurrentRatio">
            <summary>
            Liquidity (current).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.QuickRatio">
            <summary>
            Liquidity (instantaneous).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.LongTermDebtEquity">
            <summary>
            Capital (longterm debt).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.TotalDebtEquity">
            <summary>
            Capital (debt).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.GrossMargin">
            <summary>
            Assets margin (gross).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.OperatingMargin">
            <summary>
            Assets margin.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.ProfitMargin">
            <summary>
            Profit margin.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.Beta">
            <summary>
            Beta.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.AverageTrueRange">
            <summary>
            ATR.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.HistoricalVolatilityWeek">
            <summary>
            Volatility (week).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.HistoricalVolatilityMonth">
            <summary>
            Volatility (month).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.IsSystem">
            <summary>
            System info.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.Decimals">
            <summary>
            Number of digits in price after coma.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.Duration">
            <summary>
            Duration.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.IssueSize">
            <summary>
            Number of issued contracts.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.BuyBackDate">
            <summary>
            BuyBack date.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Level1Fields.BuyBackPrice">
            <summary>
            BuyBack price.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.Level1ChangeMessage">
            <summary>
            The message containing the level1 market data.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.Level1ChangeMessage.SecurityId">
            <summary>
            Security ID.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.Level1ChangeMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.Level1ChangeMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.Level1ChangeMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.Level1ChangeMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.Level1ChangeMessage.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:StockSharp.Messages.MarketDataTypes">
            <summary>
            Market-data types.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MarketDataTypes.Level1">
            <summary>
            Level 1.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MarketDataTypes.MarketDepth">
            <summary>
            Market depth (order book).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MarketDataTypes.Trades">
            <summary>
            Tick trades.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MarketDataTypes.OrderLog">
            <summary>
            Order log.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MarketDataTypes.News">
            <summary>
            News.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MarketDataTypes.CandleTimeFrame">
            <summary>
            Candles (time-frame).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MarketDataTypes.CandleTick">
            <summary>
            Candle (tick).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MarketDataTypes.CandleVolume">
            <summary>
            Candle (volume).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MarketDataTypes.CandleRange">
            <summary>
            Candle (range).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MarketDataTypes.CandlePnF">
            <summary>
            Candle (X&amp;0).
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MarketDataTypes.CandleRenko">
            <summary>
            Candle (renko).
            </summary>
        </member>
        <member name="T:StockSharp.Messages.BuildCandlesModes">
            <summary>
            Build candles modes.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.BuildCandlesModes.LoadAndBuild">
            <summary>
            Request built candles and build the missing candles from trades, depths etc.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.BuildCandlesModes.Load">
            <summary>
            Request only built candles.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.BuildCandlesModes.Build">
            <summary>
            Build from trades, depths etc.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.MarketDataMessage">
            <summary>
            Market-data message (uses as a subscribe/unsubscribe in outgoing case, confirmation event in incoming case).
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MarketDataMessage.From">
            <summary>
            Start date, from which data needs to be retrieved.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MarketDataMessage.To">
            <summary>
            End date, until which data needs to be retrieved.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MarketDataMessage.DataType">
            <summary>
            Market data type.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MarketDataMessage.Arg">
            <summary>
            Additional argument for market data request.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MarketDataMessage.IsSubscribe">
            <summary>
            The message is market-data subscription.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MarketDataMessage.TransactionId">
            <summary>
            Request identifier.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MarketDataMessage.IsNotSupported">
            <summary>
            The message is not supported by adapter. To be setted if the answer.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MarketDataMessage.Error">
            <summary>
            Subscribe or unsubscribe error info. Заполняется в случае ответа.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MarketDataMessage.Count">
            <summary>
            Market-data count.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MarketDataMessage.MaxDepth">
            <summary>
            Max depth or requested order book. Uses in case <see cref="P:StockSharp.Messages.MarketDataMessage.DataType"/> = <see cref="F:StockSharp.Messages.MarketDataTypes.MarketDepth"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MarketDataMessage.NewsId">
            <summary>
            News id. Uses in case of request news text.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MarketDataMessage.IsCalcVolumeProfile">
            <summary>
            To perform the calculation <see cref="P:StockSharp.Messages.CandleMessage.PriceLevels"/>. By default, it is disabled.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MarketDataMessage.BuildCandlesMode">
            <summary>
            Build candles mode.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.MarketDataMessage.IsHistory">
            <summary>
            Contains history market data.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.MarketDataMessage.DefaultMaxDepth">
            <summary>
            The default depth of order book.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.MarketDataMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.MarketDataMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.MarketDataMessage.#ctor(StockSharp.Messages.MessageTypes)">
            <summary>
            Initialize <see cref="T:StockSharp.Messages.MarketDataMessage"/>.
            </summary>
            <param name="type">Message type.</param>
        </member>
        <member name="M:StockSharp.Messages.MarketDataMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.MarketDataMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.MarketDataMessage.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:StockSharp.Messages.RepoOrderInfo">
            <summary>
            REPO info.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.RepoOrderInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.RepoOrderInfo"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.RepoOrderInfo.Partner">
            <summary>
            Partner-organization.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.RepoOrderInfo.Term">
            <summary>
            REPO expiration.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.RepoOrderInfo.Rate">
            <summary>
            Repo rate, in percentage.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.RepoOrderInfo.BlockSecurities">
            <summary>
            Blocking code.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.RepoOrderInfo.RefundRate">
            <summary>
            The rate of fixed compensation payable in the event that the second part of the repo, the percentage.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.RepoOrderInfo.MatchRef">
            <summary>
            REPO RPS reference.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.RepoOrderInfo.SettleCode">
            <summary>
            Settlement code.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.RepoOrderInfo.SecondPrice">
            <summary>
            REPO second price part.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.RepoOrderInfo.SettleDate">
            <summary>
            Execution date OTC.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.RepoOrderInfo.StartDiscount">
            <summary>
            REPO-M the begin value of the discount.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.RepoOrderInfo.LowerDiscount">
            <summary>
            REPO-M the lower limit value of the discount.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.RepoOrderInfo.UpperDiscount">
            <summary>
            REPO-M the upper limit value of the discount.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.RepoOrderInfo.Value">
            <summary>
            REPO-M volume.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.RepoOrderInfo.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.RepoOrderInfo"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Messages.RpsOrderInfo">
            <summary>
            RPS order info.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.RpsOrderInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.RpsOrderInfo"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.RpsOrderInfo.Partner">
            <summary>
            Partner-organization.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.RpsOrderInfo.SettleDate">
            <summary>
            Execution date OTC.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.RpsOrderInfo.MatchRef">
            <summary>
            REPO RPS reference.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.RpsOrderInfo.SettleCode">
            <summary>
            Settlement code.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.RpsOrderInfo.ForAccount">
            <summary>
            Owner of transaction (OTC trade).
            </summary>
        </member>
        <member name="P:StockSharp.Messages.RpsOrderInfo.CurrencyType">
            <summary>
            Currency code in ISO 4217 standard (OTC trade). Параметр внебиржевой сделки.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.RpsOrderInfo.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.RpsOrderInfo"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Messages.SecurityId">
            <summary>
            Security ID.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityId.SecurityCode">
            <summary>
            Security code.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityId.BoardCode">
            <summary>
            Electronic board code.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityId.Native">
            <summary>
            Native (internal) trading system security id.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityId.NativeAsInt">
            <summary>
            Native (internal) trading system security id represented as integer.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityId.SecurityType">
            <summary>
            Security type.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityId.Sedol">
            <summary>
            ID in SEDOL format (Stock Exchange Daily Official List).
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityId.Cusip">
            <summary>
            ID in CUSIP format (Committee on Uniform Securities Identification Procedures).
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityId.Isin">
            <summary>
            ID in ISIN format (International Securities Identification Number).
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityId.Ric">
            <summary>
            ID in RIC format (Reuters Instrument Code).
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityId.Bloomberg">
            <summary>
            ID in Bloomberg format.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityId.IQFeed">
            <summary>
            ID in IQFeed format.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityId.InteractiveBrokers">
            <summary>
            ID in Interactive Brokers format.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityId.Plaza">
            <summary>
            ID in Plaza format.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.SecurityId.GetHashCode">
            <summary>
            Get the hash code of the object.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:StockSharp.Messages.SecurityId.Equals(System.Object)">
            <summary>
            Compare <see cref="T:StockSharp.Messages.SecurityId"/> on the equivalence.
            </summary>
            <param name="other">Another value with which to compare.</param>
            <returns><see langword="true" />, if the specified object is equal to the current object, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Messages.SecurityId.Equals(StockSharp.Messages.SecurityId)">
            <summary>
            Compare <see cref="T:StockSharp.Messages.Currency"/> on the equivalence.
            </summary>
            <param name="other">Another value with which to compare.</param>
            <returns><see langword="true" />, if the specified object is equal to the current object, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Messages.SecurityId.op_Inequality(StockSharp.Messages.SecurityId,StockSharp.Messages.SecurityId)">
            <summary>
            Compare the inequality of two identifiers.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns><see langword="true" />, if identifiers are equal, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Messages.SecurityId.op_Equality(StockSharp.Messages.SecurityId,StockSharp.Messages.SecurityId)">
            <summary>
            Compare two identifiers for equality.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns><see langword="true" />, if the specified identifiers are equal, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Messages.SecurityId.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:StockSharp.Messages.SecurityLookupMessage">
            <summary>
            Message security lookup for specified criteria.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityLookupMessage.TransactionId">
            <summary>
            Transaction ID.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityLookupMessage.SecurityTypes">
            <summary>
            Securities types.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityLookupMessage.CFICode">
            <summary>
            CFI code.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.SecurityLookupMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.SecurityLookupMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.SecurityLookupMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.SecurityLookupMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.SecurityLookupMessage.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:StockSharp.Messages.SecurityLookupResultMessage">
            <summary>
            Security lookup result message.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityLookupResultMessage.OriginalTransactionId">
            <summary>
            ID of the original message <see cref="P:StockSharp.Messages.SecurityLookupMessage.TransactionId"/> for which this message is a response.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityLookupResultMessage.Error">
            <summary>
            Error info.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.SecurityLookupResultMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.SecurityLookupResultMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.SecurityLookupResultMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.SecurityLookupResultMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.SecurityLookupResultMessage.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:StockSharp.Messages.SecurityMessage">
            <summary>
            A message containing info about the security.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMessage.SecurityId">
            <summary>
            Security ID.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMessage.Name">
            <summary>
            Security name.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMessage.ShortName">
            <summary>
            Short security name.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMessage.VolumeStep">
            <summary>
            Minimum volume step.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMessage.Multiplier">
            <summary>
            Lot multiplier.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMessage.Decimals">
            <summary>
            Number of digits in price after coma.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMessage.PriceStep">
            <summary>
            Minimum price step.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMessage.SecurityType">
            <summary>
            Security type.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMessage.ExpiryDate">
            <summary>
            Security expiration date (for derivatives - expiration, for bonds — redemption).
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMessage.SettlementDate">
            <summary>
            Settlement date for security (for derivatives and bonds).
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMessage.UnderlyingSecurityCode">
            <summary>
            Underlying asset code, on which the current security is based.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMessage.Strike">
            <summary>
            Option strike price.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMessage.OptionType">
            <summary>
            Option type.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMessage.BinaryOptionType">
            <summary>
            Type of binary option.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMessage.Currency">
            <summary>
            Trading security currency.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMessage.OriginalTransactionId">
            <summary>
            ID of the original message <see cref="P:StockSharp.Messages.SecurityLookupMessage.TransactionId"/> for which this message is a response.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SecurityMessage.Class">
            <summary>
            Security class.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.SecurityMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.SecurityMessage"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.SecurityMessage.#ctor(StockSharp.Messages.MessageTypes)">
            <summary>
            Initialize <see cref="T:StockSharp.Messages.SecurityMessage"/>.
            </summary>
            <param name="type">Message type.</param>
        </member>
        <member name="M:StockSharp.Messages.SecurityMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.SecurityMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.SecurityMessage.CopyTo(StockSharp.Messages.SecurityMessage)">
            <summary>
            Copy the message into the <paramref name="destination" />.
            </summary>
            <param name="destination">The object, which copied information.</param>
        </member>
        <member name="M:StockSharp.Messages.SecurityMessage.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:StockSharp.Messages.SecurityStates">
            <summary>
            Security states.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SecurityStates.Trading">
            <summary>
            Active.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SecurityStates.Stoped">
            <summary>
            Suspended.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.SecurityTypes">
            <summary>
            Securities types.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SecurityTypes.Stock">
            <summary>
            Shares.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SecurityTypes.Future">
            <summary>
            Future contract.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SecurityTypes.Option">
            <summary>
            Options contract.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SecurityTypes.Index">
            <summary>
            Index.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SecurityTypes.Currency">
            <summary>
            Currency.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SecurityTypes.Bond">
            <summary>
            Bond.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SecurityTypes.Warrant">
            <summary>
            Warrant.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SecurityTypes.Forward">
            <summary>
            Forward.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SecurityTypes.Swap">
            <summary>
            Swap.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SecurityTypes.Commodity">
            <summary>
            Product.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SecurityTypes.Cfd">
            <summary>
            CFD.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SecurityTypes.News">
            <summary>
            News.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SecurityTypes.Weather">
            <summary>
            Weather.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SecurityTypes.Fund">
            <summary>
            Mutual funds.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SecurityTypes.Adr">
            <summary>
            American Depositary Receipts.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SecurityTypes.CryptoCurrency">
            <summary>
            Cryptocurrency.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.SessionStates">
            <summary>
            Session states.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SessionStates.Assigned">
            <summary>
            Session assigned. Cannot register new orders, but can cancel.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SessionStates.Active">
            <summary>
            Session active. Can register and cancel orders.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SessionStates.Paused">
            <summary>
            Suspended. Cannot register new orders, but can cancel.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SessionStates.ForceStopped">
            <summary>
            Rejected. Cannot register and cancel orders.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.SessionStates.Ended">
            <summary>
            Finished. Cannot register and cancel orders.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.SessionMessage">
            <summary>
            Session change changed message.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.SessionMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.SessionMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SessionMessage.BoardCode">
            <summary>
            Board code.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.SessionMessage.State">
            <summary>
            Session state.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.SessionMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.SessionMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.SessionMessage.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:StockSharp.Messages.Sides">
            <summary>
            Sides.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Sides.Buy">
            <summary>
            Buy.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.Sides.Sell">
            <summary>
            Sell.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.TimeInForce">
            <summary>
            Limit order time in force.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.TimeInForce.PutInQueue">
            <summary>
            Put in queue.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.TimeInForce.MatchOrCancel">
            <summary>
            Fill Or Kill.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.TimeInForce.CancelBalance">
            <summary>
            Immediate Or Cancel.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.TimeMessage">
            <summary>
            The message contains information about the current time.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.TimeMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.TimeMessage"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.TimeMessage.TransactionId">
            <summary>
            Request identifier.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.TimeMessage.OriginalTransactionId">
            <summary>
            ID of the original message <see cref="P:StockSharp.Messages.TimeMessage.TransactionId"/> for which this message is a response.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.TimeMessage.ServerTime">
            <summary>
            Server time.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.TimeMessage.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:StockSharp.Messages.TimeMessage.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.TimeMessage"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="T:StockSharp.Messages.TPlusLimits">
            <summary>
            Т+ limit types.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.TPlusLimits.T0">
            <summary>
            Т+0.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.TPlusLimits.T1">
            <summary>
            Т+1.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.TPlusLimits.T2">
            <summary>
            Т+2.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.TPlusLimits.Tx">
            <summary>
            Т+x.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.UnitTypes">
            <summary>
            Mearure units.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.UnitTypes.Absolute">
            <summary>
            The absolute value. Incremental change is a given number.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.UnitTypes.Percent">
            <summary>
            Percents.Step change - one hundredth of a percent.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.UnitTypes.Point">
            <summary>
            Point.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.UnitTypes.Step">
            <summary>
            Price step.
            </summary>
        </member>
        <member name="F:StockSharp.Messages.UnitTypes.Limit">
            <summary>
            The limited value. This unit allows to set a specific change number, which can not be used in arithmetic operations <see cref="T:StockSharp.Messages.Unit"/>.
            </summary>
        </member>
        <member name="T:StockSharp.Messages.Unit">
            <summary>
            Special class, allows to set the value as a percentage, absolute, points and pips values.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.Unit.#ctor">
            <summary>
            Create unit.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.Unit.#ctor(System.Decimal)">
            <summary>
            Create absolute value <see cref="F:StockSharp.Messages.UnitTypes.Absolute"/>.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:StockSharp.Messages.Unit.#ctor(System.Decimal,StockSharp.Messages.UnitTypes)">
            <summary>
            Create a value of types <see cref="F:StockSharp.Messages.UnitTypes.Absolute"/> and <see cref="F:StockSharp.Messages.UnitTypes.Percent"/>.
            </summary>
            <param name="value">Value.</param>
            <param name="type">Mearure unit.</param>
        </member>
        <member name="M:StockSharp.Messages.Unit.#ctor(System.Decimal,StockSharp.Messages.UnitTypes,System.Func{StockSharp.Messages.UnitTypes,System.Nullable{System.Decimal}})">
            <summary>
            Create a value of types <see cref="F:StockSharp.Messages.UnitTypes.Point"/> and <see cref="F:StockSharp.Messages.UnitTypes.Step"/>.
            </summary>
            <param name="value">Value.</param>
            <param name="type">Mearure unit.</param>
            <param name="getTypeValue">The handler returns a value associated with <see cref="P:StockSharp.Messages.Unit.Type"/> (price or volume steps).</param>
        </member>
        <member name="P:StockSharp.Messages.Unit.Type">
            <summary>
            Mearure unit.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.Unit.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.Unit.GetTypeValue">
            <summary>
            The handler returns a value associated with <see cref="P:StockSharp.Messages.Unit.Type"/> (price or volume steps).
            </summary>
        </member>
        <member name="M:StockSharp.Messages.Unit.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.Unit"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.CompareTo(StockSharp.Messages.Unit)">
            <summary>
            Compare <see cref="T:StockSharp.Messages.Unit"/> on the equivalence.
            </summary>
            <param name="other">Another value with which to compare.</param>
            <returns>The result of the comparison.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.op_Implicit(System.Decimal)~StockSharp.Messages.Unit">
            <summary>
            Cast <see cref="T:System.Decimal"/> object to the type <see cref="T:StockSharp.Messages.Unit"/>.
            </summary>
            <param name="value"><see cref="T:System.Decimal"/> value.</param>
            <returns>Object <see cref="T:StockSharp.Messages.Unit"/>.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.op_Implicit(System.Int32)~StockSharp.Messages.Unit">
            <summary>
            Cast <see cref="T:System.Int32"/> object to the type <see cref="T:StockSharp.Messages.Unit"/>.
            </summary>
            <param name="value"><see cref="T:System.Int32"/> value.</param>
            <returns>Object <see cref="T:StockSharp.Messages.Unit"/>.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.op_Explicit(StockSharp.Messages.Unit)~System.Decimal">
            <summary>
            Cast object from <see cref="T:StockSharp.Messages.Unit"/> to <see cref="T:System.Decimal"/>.
            </summary>
            <param name="unit">Object <see cref="T:StockSharp.Messages.Unit"/>.</param>
            <returns><see cref="T:System.Decimal"/> value.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.op_Implicit(System.Double)~StockSharp.Messages.Unit">
            <summary>
            Cast <see cref="T:System.Double"/> object to the type <see cref="T:StockSharp.Messages.Unit"/>.
            </summary>
            <param name="value"><see cref="T:System.Double"/> value.</param>
            <returns>Object <see cref="T:StockSharp.Messages.Unit"/>.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.op_Explicit(StockSharp.Messages.Unit)~System.Double">
            <summary>
            Cast object from <see cref="T:StockSharp.Messages.Unit"/> to <see cref="T:System.Double"/>.
            </summary>
            <param name="unit">Object <see cref="T:StockSharp.Messages.Unit"/>.</param>
            <returns><see cref="T:System.Double"/> value.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.op_Addition(StockSharp.Messages.Unit,StockSharp.Messages.Unit)">
            <summary>
            Add the two objects <see cref="T:StockSharp.Messages.Unit"/>.
            </summary>
            <param name="u1">First object <see cref="T:StockSharp.Messages.Unit"/>.</param>
            <param name="u2">Second object <see cref="T:StockSharp.Messages.Unit"/>.</param>
            <returns>The result of addition.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.op_Multiply(StockSharp.Messages.Unit,StockSharp.Messages.Unit)">
            <summary>
            Multiply the two objects <see cref="T:StockSharp.Messages.Unit"/>.
            </summary>
            <param name="u1">First object <see cref="T:StockSharp.Messages.Unit"/>.</param>
            <param name="u2">Second object <see cref="T:StockSharp.Messages.Unit"/>.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.op_Subtraction(StockSharp.Messages.Unit,StockSharp.Messages.Unit)">
            <summary>
            Subtract the unit <see cref="T:StockSharp.Messages.Unit"/> from another.
            </summary>
            <param name="u1">First object <see cref="T:StockSharp.Messages.Unit"/>.</param>
            <param name="u2">Second object <see cref="T:StockSharp.Messages.Unit"/>.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.op_Division(StockSharp.Messages.Unit,StockSharp.Messages.Unit)">
            <summary>
            Divide the unit <see cref="T:StockSharp.Messages.Unit"/> to another.
            </summary>
            <param name="u1">First object <see cref="T:StockSharp.Messages.Unit"/>.</param>
            <param name="u2">Second object <see cref="T:StockSharp.Messages.Unit"/>.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.GetHashCode">
            <summary>
            Get the hash code of the object <see cref="T:StockSharp.Messages.Unit"/>.
            </summary>
            <returns>A hash code.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.OnEquals(StockSharp.Messages.Unit)">
            <summary>
            Compare <see cref="T:StockSharp.Messages.Unit"/> on the equivalence.
            </summary>
            <param name="other">Another value with which to compare.</param>
            <returns><see langword="true" />, if the specified object is equal to the current object, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.Equals(System.Object)">
            <summary>
            Compare <see cref="T:StockSharp.Messages.Unit"/> on the equivalence.
            </summary>
            <param name="other">Another value with which to compare.</param>
            <returns><see langword="true" />, if the specified object is equal to the current object, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.op_Inequality(StockSharp.Messages.Unit,StockSharp.Messages.Unit)">
            <summary>
            Compare two values in the inequality (if the value of different types, the convertion will be used).
            </summary>
            <param name="u1">First unit.</param>
            <param name="u2">Second unit.</param>
            <returns><see langword="true" />, if the values are equals, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.op_Equality(StockSharp.Messages.Unit,StockSharp.Messages.Unit)">
            <summary>
            Compare two values for equality (if the value of different types, the convertion will be used).
            </summary>
            <param name="u1">First unit.</param>
            <param name="u2">Second unit.</param>
            <returns><see langword="true" />, if the values are equals, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.Convert(StockSharp.Messages.UnitTypes)">
            <summary>
            Cast the value to another type.
            </summary>
            <param name="destinationType">Destination value type.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.Convert(StockSharp.Messages.UnitTypes,System.Func{StockSharp.Messages.UnitTypes,System.Nullable{System.Decimal}})">
            <summary>
            Cast the value to another type.
            </summary>
            <param name="destinationType">Destination value type.</param>
            <param name="getTypeValue">The handler returns a value associated with <see cref="P:StockSharp.Messages.Unit.Type"/> (price or volume steps).</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.op_GreaterThan(StockSharp.Messages.Unit,StockSharp.Messages.Unit)">
            <summary>
            Check whether the first value is greater than the second.
            </summary>
            <param name="u1">First unit.</param>
            <param name="u2">Second unit.</param>
            <returns><see langword="true" />, if the first value is greater than the second, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.op_GreaterThanOrEqual(StockSharp.Messages.Unit,StockSharp.Messages.Unit)">
            <summary>
            Check whether the first value is greater than or equal to the second.
            </summary>
            <param name="u1">First unit.</param>
            <param name="u2">Second unit.</param>
            <returns><see langword="true" />, if the first value is greater than or equal the second, otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.op_LessThan(StockSharp.Messages.Unit,StockSharp.Messages.Unit)">
            <summary>
            Check whether the first value is less than the second.
            </summary>
            <param name="u1">First unit.</param>
            <param name="u2">Second unit.</param>
            <returns><see langword="true" />, if the first value is less than the second, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.op_LessThanOrEqual(StockSharp.Messages.Unit,StockSharp.Messages.Unit)">
            <summary>
            Check whether the first value is less than or equal to the second.
            </summary>
            <param name="u1">First unit.</param>
            <param name="u2">Second unit.</param>
            <returns><see langword="true" />, if the first value is less than or equal to the second, <see langword="false" />.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.op_UnaryNegation(StockSharp.Messages.Unit)">
            <summary>
            Get the value with the opposite sign from the value <see cref="P:StockSharp.Messages.Unit.Value"/>.
            </summary>
            <param name="u">Unit.</param>
            <returns>Opposite value.</returns>
        </member>
        <member name="M:StockSharp.Messages.Unit.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Messages.Unit.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="T:StockSharp.Messages.UnitHelper">
            <summary>
            Extension class for <see cref="T:StockSharp.Messages.Unit"/>.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.UnitHelper.Percents(System.Int32)">
            <summary>
            Convert the <see cref="T:System.Int32"/> to percents.
            </summary>
            <param name="value"><see cref="T:System.Int32"/> value.</param>
            <returns>Percents.</returns>
        </member>
        <member name="M:StockSharp.Messages.UnitHelper.Percents(System.Double)">
            <summary>
            Convert the <see cref="T:System.Double"/> to percents.
            </summary>
            <param name="value"><see cref="T:System.Double"/> value.</param>
            <returns>Percents.</returns>
        </member>
        <member name="M:StockSharp.Messages.UnitHelper.Percents(System.Decimal)">
            <summary>
            Convert the <see cref="T:System.Decimal"/> to percents.
            </summary>
            <param name="value"><see cref="T:System.Decimal"/> value.</param>
            <returns>Percents.</returns>
        </member>
        <member name="M:StockSharp.Messages.UnitHelper.ToUnit(System.String,System.Func{StockSharp.Messages.UnitTypes,System.Nullable{System.Decimal}})">
            <summary>
            Convert string to <see cref="T:StockSharp.Messages.Unit"/>.
            </summary>
            <param name="str">String value of <see cref="T:StockSharp.Messages.Unit"/>.</param>
            <param name="getTypeValue">The handler returns a value associated with <see cref="T:System.Type"/> (price or volume steps).</param>
            <returns>Object <see cref="T:StockSharp.Messages.Unit"/>.</returns>
        </member>
        <member name="T:StockSharp.Messages.WorkingTime">
            <summary>
            Work mode (time, holidays etc.).
            </summary>
        </member>
        <member name="M:StockSharp.Messages.WorkingTime.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StockSharp.Messages.WorkingTime"/>.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.WorkingTime.Periods">
            <summary>
            Schedule validity periods.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.WorkingTime.SpecialWorkingDays">
            <summary>
            Working days, falling on Saturday and Sunday.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.WorkingTime.SpecialHolidays">
            <summary>
            Holidays that fall on workdays.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.WorkingTime.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.WorkingTime"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.WorkingTime.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Messages.WorkingTime.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Messages.WorkingTime.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:StockSharp.Messages.WorkingTimePeriod">
            <summary>
            Schedule validity period.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.WorkingTimePeriod.Till">
            <summary>
            Schedule expiration date.
            </summary>
        </member>
        <member name="P:StockSharp.Messages.WorkingTimePeriod.Times">
            <summary>
            Work schedule within day.
            </summary>
        </member>
        <member name="M:StockSharp.Messages.WorkingTimePeriod.Clone">
            <summary>
            Create a copy of <see cref="T:StockSharp.Messages.WorkingTimePeriod"/>.
            </summary>
            <returns>Copy.</returns>
        </member>
        <member name="M:StockSharp.Messages.WorkingTimePeriod.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Load settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Messages.WorkingTimePeriod.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Save settings.
            </summary>
            <param name="storage">Settings storage.</param>
        </member>
        <member name="M:StockSharp.Messages.WorkingTimePeriod.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
    </members>
</doc>
